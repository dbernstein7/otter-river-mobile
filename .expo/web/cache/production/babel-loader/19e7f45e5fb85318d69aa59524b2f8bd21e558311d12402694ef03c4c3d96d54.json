{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import*as THREE from'three';import{GLTFLoader}from'three/examples/jsm/loaders/GLTFLoader.js';var scene,camera,renderer;var otter,river;var score=0;var lives=3;var gameStarted=false;var gameOver=false;var obstacles=[];var fish=[];var lastObstacleTime=0;var lastFishTime=0;var gameTime=0;var level=1;var timerInterval;var baseSpeed=0.2;var obstacleSpawnInterval=300;var currentObstacleInterval=obstacleSpawnInterval;var keys={ArrowUp:false,ArrowDown:false,ArrowLeft:false,ArrowRight:false,w:false,a:false,s:false,d:false};var leaderboard=JSON.parse(localStorage.getItem('otterRiverLeaderboard'))||[];var FISH_TYPES={normal:{color:0xFFD700,points:1,speed:0.3,scale:1,probability:0.3},rainbow:{color:0xFF69B4,points:3,speed:0.4,scale:1.2,probability:0.15},golden:{color:0xFFA500,points:5,speed:0.5,scale:1.4,probability:0.1},emerald:{color:0x00FF00,points:7,speed:0.6,scale:1.6,probability:0.1},diamond:{color:0x00FFFF,points:10,speed:0.7,scale:1.8,probability:0.05},clam:{color:0xFFE4E1,points:15,speed:0.2,scale:1.2,probability:0.05,isClam:true},seahorse:{color:0x9370DB,points:8,speed:0.3,scale:1.3,probability:0.1,isSpecial:true},jellyfish:{color:0xFFB6C1,points:12,speed:0.4,scale:1.5,probability:0.08,isSpecial:true},starfish:{color:0xFF4500,points:6,speed:0.2,scale:1.2,probability:0.07,isSpecial:true}};var OBSTACLE_TYPES={rock:{geometry:new THREE.DodecahedronGeometry(1,0),color:0x808080,scale:1,probability:0.3},log:{geometry:new THREE.CylinderGeometry(0.5,0.5,3,8),color:0x8B4513,scale:1,probability:0.3},boat:{geometry:new THREE.BoxGeometry(2,0.5,4),color:0x8B4513,scale:1,probability:0.2},island:{geometry:new THREE.ConeGeometry(2,1,8),color:0x90EE90,scale:1,probability:0.1},shark:{geometry:new THREE.ConeGeometry(0.5,2,8),color:0x4682B4,scale:1,probability:0.1}};function init(){scene=new THREE.Scene();scene.background=new THREE.Color(0x87CEEB);scene.fog=new THREE.Fog(0x87CEEB,20,100);camera=new THREE.PerspectiveCamera(60,window.innerWidth/window.innerHeight,0.1,1000);camera.position.set(0,15,20);camera.lookAt(0,0,-100);scene.add(camera);renderer=new THREE.WebGLRenderer({antialias:true});renderer.setSize(window.innerWidth,window.innerHeight);renderer.shadowMap.enabled=true;renderer.shadowMap.type=THREE.PCFSoftShadowMap;document.getElementById('game-container').appendChild(renderer.domElement);var ambientLight=new THREE.AmbientLight(0xffffff,0.5);scene.add(ambientLight);var directionalLight=new THREE.DirectionalLight(0xffffff,0.8);directionalLight.position.set(5,5,5);directionalLight.castShadow=true;directionalLight.shadow.mapSize.width=2048;directionalLight.shadow.mapSize.height=2048;scene.add(directionalLight);createEnvironment();createRiver();createOtter();window.addEventListener('resize',onWindowResize);window.addEventListener('keydown',onKeyDown);window.addEventListener('keyup',onKeyUp);resetGameState();document.getElementById('start-screen').style.display='block';document.getElementById('game-over').style.display='none';animate();}function resetGameState(){score=0;lives=3;gameStarted=false;gameOver=false;obstacles=[];fish=[];lastObstacleTime=0;lastFishTime=0;gameTime=0;level=1;baseSpeed=0.2;currentObstacleInterval=obstacleSpawnInterval;updateScore();updateLives();updateLevel();updateLeaderboard();}function createRiver(){var waterGeometry=new THREE.PlaneGeometry(600,600);var waterMaterial=new THREE.MeshStandardMaterial({color:0x0077be,roughness:0.1,metalness:0.2,transparent:true,opacity:1});var water=new THREE.Mesh(waterGeometry,waterMaterial);water.rotation.x=-Math.PI/2;water.position.y=-0.5;water.position.z=-300;water.receiveShadow=true;scene.add(water);var bottomCoverGeometry=new THREE.BoxGeometry(600,2,600);var bottomCoverMaterial=new THREE.MeshStandardMaterial({color:0x0077be,roughness:0.1,metalness:0.2});var bottomCover=new THREE.Mesh(bottomCoverGeometry,bottomCoverMaterial);bottomCover.position.set(0,-2,-300);bottomCover.receiveShadow=true;scene.add(bottomCover);var riverGeometry=new THREE.PlaneGeometry(40,600,40,100);var riverMaterial=new THREE.MeshStandardMaterial({color:0x0077be,roughness:1.0,metalness:0.0,transparent:true,opacity:0.9});river=new THREE.Mesh(riverGeometry,riverMaterial);river.rotation.x=-Math.PI/2;river.position.z=-300;river.position.y=0.5;river.receiveShadow=true;scene.add(river);var streamGeometry=new THREE.PlaneGeometry(15,600,20,100);var streamMaterial=new THREE.MeshStandardMaterial({color:0x00BFFF,roughness:1.0,metalness:0.0,transparent:true,opacity:0.9});var stream=new THREE.Mesh(streamGeometry,streamMaterial);stream.rotation.x=-Math.PI/2;stream.position.z=-300;stream.position.y=0.55;stream.position.x=50;stream.receiveShadow=true;scene.add(stream);var stream2=stream.clone();stream2.position.x=-50;scene.add(stream2);}function createOtter(){otter=new THREE.Group();var bodyGeometry=new THREE.SphereGeometry(0.5,16,16);var bodyMaterial=new THREE.MeshStandardMaterial({color:0x8B4513,roughness:0.7,metalness:0.1});var body=new THREE.Mesh(bodyGeometry,bodyMaterial);body.scale.set(1,0.8,1.2);body.castShadow=true;otter.add(body);var headGeometry=new THREE.SphereGeometry(0.45,16,16);var headMaterial=new THREE.MeshStandardMaterial({color:0x8B4513,roughness:0.7,metalness:0.1});var head=new THREE.Mesh(headGeometry,headMaterial);head.position.set(0,0.3,0.8);head.castShadow=true;otter.add(head);var snoutGeometry=new THREE.SphereGeometry(0.25,16,16);var snoutMaterial=new THREE.MeshStandardMaterial({color:0x8B4513,roughness:0.7,metalness:0.1});var snout=new THREE.Mesh(snoutGeometry,snoutMaterial);snout.position.set(0,0.2,1.2);snout.scale.set(1,0.8,0.6);snout.castShadow=true;otter.add(snout);var noseGeometry=new THREE.SphereGeometry(0.1,8,8);var noseMaterial=new THREE.MeshStandardMaterial({color:0x000000});var nose=new THREE.Mesh(noseGeometry,noseMaterial);nose.position.set(0,0.2,1.35);otter.add(nose);var eyeGeometry=new THREE.SphereGeometry(0.12,8,8);var eyeMaterial=new THREE.MeshStandardMaterial({color:0x000000});var leftEye=new THREE.Mesh(eyeGeometry,eyeMaterial);var rightEye=new THREE.Mesh(eyeGeometry,eyeMaterial);leftEye.position.set(0.25,0.4,1.1);rightEye.position.set(-0.25,0.4,1.1);otter.add(leftEye);otter.add(rightEye);var earGeometry=new THREE.SphereGeometry(0.15,8,8);var earMaterial=new THREE.MeshStandardMaterial({color:0x8B4513,roughness:0.7,metalness:0.1});var leftEar=new THREE.Mesh(earGeometry,earMaterial);var rightEar=new THREE.Mesh(earGeometry,earMaterial);leftEar.position.set(0.3,0.6,0.9);rightEar.position.set(-0.3,0.6,0.9);otter.add(leftEar);otter.add(rightEar);var tailGeometry=new THREE.SphereGeometry(0.4,16,16);var tailMaterial=new THREE.MeshStandardMaterial({color:0x8B4513,roughness:0.7,metalness:0.1});var tail=new THREE.Mesh(tailGeometry,tailMaterial);tail.position.set(0,0.2,-1);tail.scale.set(1.5,0.2,0.8);tail.rotation.y=Math.PI/2;tail.castShadow=true;otter.add(tail);var legGeometry=new THREE.SphereGeometry(0.2,8,8);var legMaterial=new THREE.MeshStandardMaterial({color:0x8B4513,roughness:0.7,metalness:0.1});var positions=[[0.4,-0.2,0.5],[-0.4,-0.2,0.5],[0.4,-0.2,-0.5],[-0.4,-0.2,-0.5]];positions.forEach(function(pos){var _leg$position;var leg=new THREE.Mesh(legGeometry,legMaterial);(_leg$position=leg.position).set.apply(_leg$position,_toConsumableArray(pos));leg.castShadow=true;otter.add(leg);});if(localStorage.getItem('topHatUnlocked')==='true'&&document.getElementById('top-hat-toggle').checked){var hatGeometry=new THREE.CylinderGeometry(0.3,0.3,0.5,16);var hatMaterial=new THREE.MeshStandardMaterial({color:0x000000});var hat=new THREE.Mesh(hatGeometry,hatMaterial);hat.position.set(0,0.8,0.8);hat.castShadow=true;hat.userData={type:'hat'};otter.add(hat);var brimGeometry=new THREE.CylinderGeometry(0.4,0.4,0.1,16);var brimMaterial=new THREE.MeshStandardMaterial({color:0x000000});var brim=new THREE.Mesh(brimGeometry,brimMaterial);brim.position.set(0,0.6,0.8);brim.castShadow=true;brim.userData={type:'brim'};otter.add(brim);}if(localStorage.getItem('crownUnlocked')==='true'&&document.getElementById('crown-toggle')&&document.getElementById('crown-toggle').checked){var crownGroup=new THREE.Group();var bandGeometry=new THREE.TorusGeometry(0.38,0.10,12,32);var bandMaterial=new THREE.MeshStandardMaterial({color:0xFFD700,metalness:0.8,roughness:0.2});var band=new THREE.Mesh(bandGeometry,bandMaterial);band.position.set(0,0.75,0.8);band.rotation.x=Math.PI/2;band.userData={type:'crown-band'};crownGroup.add(band);for(var i=0;i<3;i++){var triangleGeometry=new THREE.ConeGeometry(0.3,0.8,3);var triangleMaterial=new THREE.MeshStandardMaterial({color:0xFFD700,metalness:0.8,roughness:0.2});var triangle=new THREE.Mesh(triangleGeometry,triangleMaterial);var angle=i/3*Math.PI*2;triangle.position.set(Math.cos(angle)*0.3,1.05,0.8+Math.sin(angle)*0.3);triangle.rotation.x=0;triangle.userData={type:'crown-triangle'};crownGroup.add(triangle);}crownGroup.userData={type:'crown'};otter.add(crownGroup);}otter.position.set(0,0.25,0);otter.rotation.y=Math.PI;scene.add(otter);}function createObstacle(){if(!gameStarted||gameOver)return;var random=Math.random();var cumulativeProbability=0;var selectedType='rock';for(var _ref of Object.entries(OBSTACLE_TYPES)){var _ref2=_slicedToArray(_ref,2);var type=_ref2[0];var properties=_ref2[1];cumulativeProbability+=properties.probability;if(random<=cumulativeProbability){selectedType=type;break;}}var obstacleProperties=OBSTACLE_TYPES[selectedType];var obstacle=new THREE.Mesh(obstacleProperties.geometry,new THREE.MeshStandardMaterial({color:obstacleProperties.color,roughness:0.8,metalness:0.2}));obstacle.position.x=(Math.random()-0.5)*40;obstacle.position.y=0.5;obstacle.position.z=-60;obstacle.rotation.x=Math.random()*Math.PI;obstacle.rotation.y=Math.random()*Math.PI;obstacle.rotation.z=Math.random()*Math.PI;obstacle.scale.set(obstacleProperties.scale,obstacleProperties.scale,obstacleProperties.scale);obstacle.castShadow=true;obstacle.userData={type:'obstacle',obstacleType:selectedType};scene.add(obstacle);obstacles.push(obstacle);}function createFish(){if(!gameStarted||gameOver)return;var random=Math.random();var cumulativeProbability=0;var selectedType='normal';for(var _ref3 of Object.entries(FISH_TYPES)){var _ref4=_slicedToArray(_ref3,2);var type=_ref4[0];var properties=_ref4[1];cumulativeProbability+=properties.probability;if(random<=cumulativeProbability){selectedType=type;break;}}var fishProperties=FISH_TYPES[selectedType];var fishGroup=new THREE.Group();if(fishProperties.isClam){var shellGeometry=new THREE.SphereGeometry(0.4,16,16);var shellMaterial=new THREE.MeshStandardMaterial({color:fishProperties.color,roughness:0.3,metalness:0.8});var shell=new THREE.Mesh(shellGeometry,shellMaterial);shell.scale.set(1,0.6,0.8);shell.castShadow=true;fishGroup.add(shell);var pearlGeometry=new THREE.SphereGeometry(0.1,8,8);var pearlMaterial=new THREE.MeshStandardMaterial({color:0xFFFFFF,roughness:0.1,metalness:0.9});var pearl=new THREE.Mesh(pearlGeometry,pearlMaterial);pearl.position.set(0,0.1,0);fishGroup.add(pearl);}else if(fishProperties.isSpecial){if(selectedType==='seahorse'){var bodyGeometry=new THREE.CapsuleGeometry(0.2,0.8,4,8);var bodyMaterial=new THREE.MeshStandardMaterial({color:fishProperties.color,roughness:0.3,metalness:0.8});var body=new THREE.Mesh(bodyGeometry,bodyMaterial);body.rotation.x=Math.PI/2;body.castShadow=true;fishGroup.add(body);var headGeometry=new THREE.SphereGeometry(0.2,8,8);var head=new THREE.Mesh(headGeometry,bodyMaterial);head.position.set(0,0.5,0);fishGroup.add(head);var tailGeometry=new THREE.ConeGeometry(0.1,0.4,4);var tail=new THREE.Mesh(tailGeometry,bodyMaterial);tail.position.set(0,-0.5,0);tail.rotation.x=-Math.PI/2;fishGroup.add(tail);}else if(selectedType==='jellyfish'){var _bodyGeometry=new THREE.SphereGeometry(0.3,16,16);var _bodyMaterial=new THREE.MeshStandardMaterial({color:fishProperties.color,roughness:0.3,metalness:0.8,transparent:true,opacity:0.8});var _body=new THREE.Mesh(_bodyGeometry,_bodyMaterial);_body.scale.set(1,0.8,1);_body.castShadow=true;fishGroup.add(_body);for(var i=0;i<8;i++){var tentacleGeometry=new THREE.CylinderGeometry(0.02,0.02,0.5,4);var tentacle=new THREE.Mesh(tentacleGeometry,_bodyMaterial);var angle=i/8*Math.PI*2;tentacle.position.set(Math.cos(angle)*0.2,-0.4,Math.sin(angle)*0.2);tentacle.rotation.x=Math.PI/2;fishGroup.add(tentacle);}}else if(selectedType==='starfish'){var starGeometry=new THREE.CircleGeometry(0.4,5);var starMaterial=new THREE.MeshStandardMaterial({color:fishProperties.color,roughness:0.3,metalness:0.8});var star=new THREE.Mesh(starGeometry,starMaterial);star.rotation.x=-Math.PI/2;star.castShadow=true;fishGroup.add(star);}}else{var _bodyGeometry2=new THREE.CapsuleGeometry(0.3,1,4,8);var _bodyMaterial2=new THREE.MeshStandardMaterial({color:fishProperties.color,roughness:0.3,metalness:0.8});var _body2=new THREE.Mesh(_bodyGeometry2,_bodyMaterial2);_body2.scale.set(1,0.6,1.2);_body2.castShadow=true;fishGroup.add(_body2);var _tailGeometry=new THREE.ConeGeometry(0.4,0.8,4);var tailMaterial=new THREE.MeshStandardMaterial({color:fishProperties.color,roughness:0.3,metalness:0.8});var _tail=new THREE.Mesh(_tailGeometry,tailMaterial);_tail.position.set(0,0,-0.8);_tail.rotation.x=Math.PI/2;_tail.scale.set(1,0.8,1);_tail.castShadow=true;fishGroup.add(_tail);var dorsalFinGeometry=new THREE.ConeGeometry(0.15,0.4,4);var dorsalFin=new THREE.Mesh(dorsalFinGeometry,tailMaterial);dorsalFin.position.set(0,0.3,0);dorsalFin.rotation.x=-Math.PI/2;dorsalFin.castShadow=true;fishGroup.add(dorsalFin);var finGeometry=new THREE.ConeGeometry(0.2,0.4,4);var finMaterial=new THREE.MeshStandardMaterial({color:fishProperties.color,roughness:0.3,metalness:0.8});var leftFin=new THREE.Mesh(finGeometry,finMaterial);leftFin.position.set(0.4,0,0.2);leftFin.rotation.z=-Math.PI/2;leftFin.rotation.y=Math.PI/4;leftFin.castShadow=true;fishGroup.add(leftFin);var rightFin=new THREE.Mesh(finGeometry,finMaterial);rightFin.position.set(-0.4,0,0.2);rightFin.rotation.z=Math.PI/2;rightFin.rotation.y=-Math.PI/4;rightFin.castShadow=true;fishGroup.add(rightFin);var pelvicFinGeometry=new THREE.ConeGeometry(0.15,0.3,4);var pelvicFinMaterial=new THREE.MeshStandardMaterial({color:fishProperties.color,roughness:0.3,metalness:0.8});var leftPelvicFin=new THREE.Mesh(pelvicFinGeometry,pelvicFinMaterial);leftPelvicFin.position.set(0.2,-0.2,0.2);leftPelvicFin.rotation.x=Math.PI/2;leftPelvicFin.rotation.z=Math.PI/4;leftPelvicFin.castShadow=true;fishGroup.add(leftPelvicFin);var rightPelvicFin=new THREE.Mesh(pelvicFinGeometry,pelvicFinMaterial);rightPelvicFin.position.set(-0.2,-0.2,0.2);rightPelvicFin.rotation.x=Math.PI/2;rightPelvicFin.rotation.z=-Math.PI/4;rightPelvicFin.castShadow=true;fishGroup.add(rightPelvicFin);var eyeGeometry=new THREE.SphereGeometry(0.08,8,8);var eyeMaterial=new THREE.MeshStandardMaterial({color:0x000000});var leftEye=new THREE.Mesh(eyeGeometry,eyeMaterial);leftEye.position.set(0.2,0.1,0.4);fishGroup.add(leftEye);var rightEye=new THREE.Mesh(eyeGeometry,eyeMaterial);rightEye.position.set(-0.2,0.1,0.4);fishGroup.add(rightEye);var mouthGeometry=new THREE.ConeGeometry(0.1,0.2,8);var mouthMaterial=new THREE.MeshStandardMaterial({color:0x000000});var mouth=new THREE.Mesh(mouthGeometry,mouthMaterial);mouth.position.set(0,0,0.6);mouth.rotation.x=Math.PI/2;fishGroup.add(mouth);}fishGroup.position.x=(Math.random()-0.5)*40;fishGroup.position.y=0.5;fishGroup.position.z=-60;fishGroup.rotation.y=Math.random()*Math.PI*2;fishGroup.scale.set(fishProperties.scale,fishProperties.scale,fishProperties.scale);fishGroup.userData={type:selectedType};var fishLight=new THREE.PointLight(0xffffff,1,2);fishLight.position.set(0,0,0);fishGroup.add(fishLight);scene.add(fishGroup);fish.push(fishGroup);}function onWindowResize(){camera.aspect=window.innerWidth/window.innerHeight;camera.updateProjectionMatrix();renderer.setSize(window.innerWidth,window.innerHeight);}function onKeyDown(event){if(keys.hasOwnProperty(event.key)){keys[event.key]=true;}}function onKeyUp(event){if(keys.hasOwnProperty(event.key)){keys[event.key]=false;}}function checkCollisions(){if(!gameStarted||gameOver)return;for(var i=obstacles.length-1;i>=0;i--){var obstacle=obstacles[i];var distance=otter.position.distanceTo(obstacle.position);if(distance<1.5){lives--;updateLives();scene.remove(obstacle);obstacles.splice(i,1);if(lives<=0){endGame();}}}for(var _i=fish.length-1;_i>=0;_i--){var fishObj=fish[_i];var _distance=otter.position.distanceTo(fishObj.position);if(_distance<1.5){var fishType=fishObj.userData.type;var fishPoints=FISH_TYPES[fishType].points;score+=fishPoints;updateScore();scene.remove(fishObj);fish.splice(_i,1);}}}function endGame(){gameOver=true;gameStarted=false;if(timerInterval){clearInterval(timerInterval);}document.getElementById('game-over').style.display='block';document.getElementById('final-score').textContent=`Final Score: ${score}`;document.getElementById('name-input').style.display='block';var nameInput=document.getElementById('player-name');nameInput.focus();var scores=JSON.parse(localStorage.getItem('scores')||'[]');scores.push({name:nameInput.value.trim()||'Anonymous',score:score,level:level,time:Math.round(gameTime)});localStorage.setItem('scores',JSON.stringify(scores));if(score>=100){localStorage.setItem('topHatUnlocked','true');}if(score>=300){localStorage.setItem('crownUnlocked','true');}updateUnlockables();updateLeaderboard();}function update(){if(!gameStarted||gameOver)return;var moveSpeed=0.2;var moving=false;var targetRotation=otter.rotation.y;if(keys.ArrowUp||keys.w){otter.position.z-=moveSpeed;targetRotation=Math.PI;moving=true;}if(keys.ArrowDown||keys.s){otter.position.z+=moveSpeed;targetRotation=0;moving=true;}if(keys.ArrowLeft||keys.a){otter.position.x-=moveSpeed;targetRotation=-Math.PI/2;moving=true;}if(keys.ArrowRight||keys.d){otter.position.x+=moveSpeed;targetRotation=Math.PI/2;moving=true;}if(moving){otter.rotation.y=THREE.MathUtils.lerp(otter.rotation.y,targetRotation,0.2);}otter.position.x=Math.max(-20,Math.min(20,otter.position.x));otter.position.z=Math.max(-49,Math.min(49,otter.position.z));var currentSpeed=baseSpeed*(1+(level-1)*0.15);currentObstacleInterval=Math.max(100,obstacleSpawnInterval-level*20);var currentTime=Date.now();if(currentTime-lastObstacleTime>currentObstacleInterval){createObstacle();if(Math.random()<level*0.1){createObstacle();}lastObstacleTime=currentTime;}if(currentTime-lastFishTime>1500){createFish();lastFishTime=currentTime;}for(var i=obstacles.length-1;i>=0;i--){obstacles[i].position.z+=currentSpeed;if(obstacles[i].position.z>10){scene.remove(obstacles[i]);obstacles.splice(i,1);}}for(var _i2=fish.length-1;_i2>=0;_i2--){var fishObj=fish[_i2];var fishType=fishObj.userData.type;var fishSpeed=FISH_TYPES[fishType].speed*currentSpeed;fishObj.position.z+=fishSpeed;fishObj.position.y=0.5+Math.sin(Date.now()*0.003+_i2)*0.1;if(fishObj.position.z>10){scene.remove(fishObj);fish.splice(_i2,1);}}gameTime+=1/120;var minutes=Math.floor(gameTime/60);var seconds=Math.floor(gameTime%60);document.getElementById('timer').textContent=`Time: ${minutes}:${seconds.toString().padStart(2,'0')}`;document.getElementById('date').textContent=new Date().toLocaleDateString();checkCollisions();updateEnvironment();}function animate(){requestAnimationFrame(animate);update();renderer.render(scene,camera);}window.startGame=function(){if(gameStarted)return;gameStarted=true;gameOver=false;document.getElementById('start-screen').style.display='none';timerInterval=setInterval(function(){level++;updateLevel();showLevelUpMessage();baseSpeed+=0.02;},15000);lastObstacleTime=Date.now();lastFishTime=Date.now();};window.restartGame=function(){obstacles.forEach(function(obstacle){return scene.remove(obstacle);});fish.forEach(function(fish){return scene.remove(fish);});if(timerInterval){clearInterval(timerInterval);}resetGameState();document.getElementById('game-over').style.display='none';startGame();};function updateScore(){document.getElementById('score').textContent=`Score: ${score}`;}function updateLives(){document.getElementById('lives').textContent=`Lives: ${lives}`;}function updateLevel(){document.getElementById('level').textContent=`Level: ${level}`;}function updateLeaderboard(){var leaderboardList=document.getElementById('top-scores');var startScores=document.getElementById('start-scores');leaderboardList.innerHTML='';startScores.innerHTML='';var scores=JSON.parse(localStorage.getItem('scores')||'[]');scores.sort(function(a,b){return b.score-a.score;});scores.slice(0,5).forEach(function(score){if(score.name!=='Anonymous'){var li=document.createElement('li');li.textContent=`${score.name}: ${score.score} points, Level ${score.level}, Time ${score.time}`;leaderboardList.appendChild(li);startScores.appendChild(li.cloneNode(true));}});}window.submitScore=function(){var nameInput=document.getElementById('player-name');var playerName=nameInput.value.trim()||'Anonymous';var scores=JSON.parse(localStorage.getItem('scores')||'[]');scores.push({name:playerName,score:score,level:level,time:Math.round(gameTime)});localStorage.setItem('scores',JSON.stringify(scores));updateLeaderboard();nameInput.value='';};function resetLeaderboard(){localStorage.removeItem('scores');updateLeaderboard();}window.onload=function(){init();resetLeaderboard();updateUnlockables();};function createEnvironment(){var sunGeometry=new THREE.SphereGeometry(5,32,32);var sunMaterial=new THREE.MeshBasicMaterial({color:0xffff00,transparent:true,opacity:0.8});var sun=new THREE.Mesh(sunGeometry,sunMaterial);sun.position.set(30,30,-50);scene.add(sun);var sunGlowGeometry=new THREE.SphereGeometry(6,32,32);var sunGlowMaterial=new THREE.MeshBasicMaterial({color:0xffff00,transparent:true,opacity:0.3});var sunGlow=new THREE.Mesh(sunGlowGeometry,sunGlowMaterial);sunGlow.position.set(30,30,-50);scene.add(sunGlow);var cloudGroup=new THREE.Group();var cloudMaterial=new THREE.MeshStandardMaterial({color:0xFFFFFF,transparent:true,opacity:0.9,roughness:0.8,metalness:0.2});for(var i=0;i<10;i++){var cloud=createCloud(cloudMaterial);cloud.position.set((Math.random()-0.5)*300,20+Math.random()*15,-100-Math.random()*200);cloud.scale.set(1+Math.random(),1+Math.random(),1+Math.random());cloud.userData={speed:0.02+Math.random()*0.03,initialX:cloud.position.x};cloudGroup.add(cloud);}scene.add(cloudGroup);scene.userData.sunGroup=sun;scene.userData.cloudGroup=cloudGroup;}function createCloud(material){var cloudGroup=new THREE.Group();var numSpheres=5+Math.floor(Math.random()*4);for(var i=0;i<numSpheres;i++){var radius=3+Math.random()*2;var geometry=new THREE.SphereGeometry(radius,8,8);var sphere=new THREE.Mesh(geometry,material);sphere.position.set((Math.random()-0.5)*8,(Math.random()-0.5)*4,(Math.random()-0.5)*8);cloudGroup.add(sphere);}return cloudGroup;}function updateEnvironment(){if(!gameStarted||gameOver)return;if(river){var time=Date.now()*0.001;var vertices=river.geometry.attributes.position.array;for(var i=0;i<vertices.length;i+=3){var x=vertices[i];var z=vertices[i+2];vertices[i+1]=Math.sin(x*0.5+time)*0.2+Math.sin(z*0.5+time)*0.2;}river.geometry.attributes.position.needsUpdate=true;river.geometry.computeVertexNormals();}if(scene.userData.sunGroup){var sun=scene.userData.sunGroup;sun.rotation.y+=0.0005;sun.rotation.z=Math.sin(Date.now()*0.0003)*0.05;}if(scene.userData.cloudGroup){var cloudGroup=scene.userData.cloudGroup;cloudGroup.children.forEach(function(cloud){cloud.position.x+=cloud.userData.speed;if(cloud.position.x>200){cloud.position.x=-200;}cloud.position.y+=Math.sin(Date.now()*0.001+cloud.position.x)*0.01;});}}function showLevelUpMessage(){var msg=document.getElementById('level-up-message');if(!msg){msg=document.createElement('div');msg.id='level-up-message';document.body.appendChild(msg);}msg.textContent=`Level ${level}!`;msg.style.display='block';msg.style.opacity='1';setTimeout(function(){msg.style.opacity='0';setTimeout(function(){msg.style.display='none';},500);},1000);}function updateUnlockables(){var unlocked=localStorage.getItem('topHatUnlocked')==='true';var status=document.getElementById('top-hat-status');var toggle=document.getElementById('top-hat-toggle');if(status){if(unlocked){status.textContent='Unlocked!';status.style.color='#4CAF50';toggle.disabled=false;}else{status.textContent='Locked (Score 100+ in a game)';status.style.color='#ff00ff';toggle.disabled=true;}}var crownStatus=document.getElementById('crown-status');var crownToggle=document.getElementById('crown-toggle');var crownUnlocked=localStorage.getItem('crownUnlocked')==='true';if(crownStatus){if(crownUnlocked){crownStatus.textContent='Unlocked!';crownStatus.style.color='#FFD700';crownToggle.disabled=false;}else{crownStatus.textContent='Locked (Score 300+ in a game)';crownStatus.style.color='#ff00ff';crownToggle.disabled=true;}}}document.getElementById('top-hat-toggle').addEventListener('change',function(){if(this.checked){var hatGeometry=new THREE.CylinderGeometry(0.3,0.3,0.5,16);var hatMaterial=new THREE.MeshStandardMaterial({color:0x000000});var hat=new THREE.Mesh(hatGeometry,hatMaterial);hat.position.set(0,0.8,0.8);hat.castShadow=true;hat.userData={type:'hat'};otter.add(hat);var brimGeometry=new THREE.CylinderGeometry(0.4,0.4,0.1,16);var brimMaterial=new THREE.MeshStandardMaterial({color:0x000000});var brim=new THREE.Mesh(brimGeometry,brimMaterial);brim.position.set(0,0.6,0.8);brim.castShadow=true;brim.userData={type:'brim'};otter.add(brim);}else{var _hat=otter.children.find(function(child){return child.userData&&child.userData.type==='hat';});if(_hat)otter.remove(_hat);var _brim=otter.children.find(function(child){return child.userData&&child.userData.type==='brim';});if(_brim)otter.remove(_brim);}var crown=otter.children.find(function(child){return child.userData&&child.userData.type==='crown';});if(crown)otter.remove(crown);var crownToggle=document.getElementById('crown-toggle');if(crownToggle)crownToggle.checked=false;});if(document.getElementById('crown-toggle')){document.getElementById('crown-toggle').addEventListener('change',function(){var crown=otter.children.find(function(child){return child.userData&&child.userData.type==='crown';});if(crown)otter.remove(crown);var hat=otter.children.find(function(child){return child.userData&&child.userData.type==='hat';});if(hat)otter.remove(hat);var brim=otter.children.find(function(child){return child.userData&&child.userData.type==='brim';});if(brim)otter.remove(brim);if(this.checked){var crownGroup=new THREE.Group();var bandGeometry=new THREE.TorusGeometry(0.38,0.10,12,32);var bandMaterial=new THREE.MeshStandardMaterial({color:0xFFD700,metalness:0.8,roughness:0.2});var band=new THREE.Mesh(bandGeometry,bandMaterial);band.position.set(0,0.75,0.8);band.rotation.x=Math.PI/2;band.userData={type:'crown-band'};crownGroup.add(band);for(var i=0;i<3;i++){var triangleGeometry=new THREE.ConeGeometry(0.3,0.8,3);var triangleMaterial=new THREE.MeshStandardMaterial({color:0xFFD700,metalness:0.8,roughness:0.2});var triangle=new THREE.Mesh(triangleGeometry,triangleMaterial);var angle=i/3*Math.PI*2;triangle.position.set(Math.cos(angle)*0.3,1.05,0.8+Math.sin(angle)*0.3);triangle.rotation.x=0;triangle.userData={type:'crown-triangle'};crownGroup.add(triangle);}crownGroup.userData={type:'crown'};otter.add(crownGroup);var topHatToggle=document.getElementById('top-hat-toggle');if(topHatToggle)topHatToggle.checked=false;}});}function returnToMenu(){document.getElementById('game-over').style.display='none';document.getElementById('start-screen').style.display='block';resetGameState();if(otter){var hat=otter.children.find(function(child){return child.userData&&child.userData.type==='hat';});if(hat){otter.remove(hat);}}gameStarted=false;gameOver=true;obstacles.forEach(function(obstacle){return scene.remove(obstacle);});fish.forEach(function(fish){return scene.remove(fish);});obstacles=[];fish=[];otter.position.set(0,0.25,0);otter.rotation.y=Math.PI;return false;}","map":{"version":3,"names":["THREE","GLTFLoader","scene","camera","renderer","otter","river","score","lives","gameStarted","gameOver","obstacles","fish","lastObstacleTime","lastFishTime","gameTime","level","timerInterval","baseSpeed","obstacleSpawnInterval","currentObstacleInterval","keys","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","w","a","s","d","leaderboard","JSON","parse","localStorage","getItem","FISH_TYPES","normal","color","points","speed","scale","probability","rainbow","golden","emerald","diamond","clam","isClam","seahorse","isSpecial","jellyfish","starfish","OBSTACLE_TYPES","rock","geometry","DodecahedronGeometry","log","CylinderGeometry","boat","BoxGeometry","island","ConeGeometry","shark","init","Scene","background","Color","fog","Fog","PerspectiveCamera","window","innerWidth","innerHeight","position","set","lookAt","add","WebGLRenderer","antialias","setSize","shadowMap","enabled","type","PCFSoftShadowMap","document","getElementById","appendChild","domElement","ambientLight","AmbientLight","directionalLight","DirectionalLight","castShadow","shadow","mapSize","width","height","createEnvironment","createRiver","createOtter","addEventListener","onWindowResize","onKeyDown","onKeyUp","resetGameState","style","display","animate","updateScore","updateLives","updateLevel","updateLeaderboard","waterGeometry","PlaneGeometry","waterMaterial","MeshStandardMaterial","roughness","metalness","transparent","opacity","water","Mesh","rotation","x","Math","PI","y","z","receiveShadow","bottomCoverGeometry","bottomCoverMaterial","bottomCover","riverGeometry","riverMaterial","streamGeometry","streamMaterial","stream","stream2","clone","Group","bodyGeometry","SphereGeometry","bodyMaterial","body","headGeometry","headMaterial","head","snoutGeometry","snoutMaterial","snout","noseGeometry","noseMaterial","nose","eyeGeometry","eyeMaterial","leftEye","rightEye","earGeometry","earMaterial","leftEar","rightEar","tailGeometry","tailMaterial","tail","legGeometry","legMaterial","positions","forEach","pos","_leg$position","leg","apply","_toConsumableArray","checked","hatGeometry","hatMaterial","hat","userData","brimGeometry","brimMaterial","brim","crownGroup","bandGeometry","TorusGeometry","bandMaterial","band","i","triangleGeometry","triangleMaterial","triangle","angle","cos","sin","createObstacle","random","cumulativeProbability","selectedType","_ref","Object","entries","_ref2","_slicedToArray","properties","obstacleProperties","obstacle","obstacleType","push","createFish","_ref3","_ref4","fishProperties","fishGroup","shellGeometry","shellMaterial","shell","pearlGeometry","pearlMaterial","pearl","CapsuleGeometry","tentacleGeometry","tentacle","starGeometry","CircleGeometry","starMaterial","star","dorsalFinGeometry","dorsalFin","finGeometry","finMaterial","leftFin","rightFin","pelvicFinGeometry","pelvicFinMaterial","leftPelvicFin","rightPelvicFin","mouthGeometry","mouthMaterial","mouth","fishLight","PointLight","aspect","updateProjectionMatrix","event","hasOwnProperty","key","checkCollisions","length","distance","distanceTo","remove","splice","endGame","fishObj","fishType","fishPoints","clearInterval","textContent","nameInput","focus","scores","name","value","trim","time","round","setItem","stringify","updateUnlockables","update","moveSpeed","moving","targetRotation","MathUtils","lerp","max","min","currentSpeed","currentTime","Date","now","fishSpeed","minutes","floor","seconds","toString","padStart","toLocaleDateString","updateEnvironment","requestAnimationFrame","render","startGame","setInterval","showLevelUpMessage","restartGame","leaderboardList","startScores","innerHTML","sort","b","slice","li","createElement","cloneNode","submitScore","playerName","resetLeaderboard","removeItem","onload","sunGeometry","sunMaterial","MeshBasicMaterial","sun","sunGlowGeometry","sunGlowMaterial","sunGlow","cloudGroup","cloudMaterial","cloud","createCloud","initialX","sunGroup","material","numSpheres","radius","sphere","vertices","attributes","array","needsUpdate","computeVertexNormals","children","msg","id","setTimeout","unlocked","status","toggle","disabled","crownStatus","crownToggle","crownUnlocked","find","child","crown","topHatToggle","returnToMenu"],"sources":["C:/Users/samsa/game2/src/main.js"],"sourcesContent":["import * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\n\n// Game state\nlet scene, camera, renderer;\nlet otter, river;\nlet score = 0;\nlet lives = 3;\nlet gameStarted = false;\nlet gameOver = false;\nlet obstacles = [];\nlet fish = [];\nlet lastObstacleTime = 0;\nlet lastFishTime = 0;\nlet gameTime = 0;\nlet level = 1;\nlet timerInterval;\nlet baseSpeed = 0.2;\nlet obstacleSpawnInterval = 300; // Base interval for obstacle spawning (in ms)\nlet currentObstacleInterval = obstacleSpawnInterval; // Current interval that changes with level\n\n// Movement controls\nconst keys = {\n    ArrowUp: false,\n    ArrowDown: false,\n    ArrowLeft: false,\n    ArrowRight: false,\n    w: false,\n    a: false,\n    s: false,\n    d: false\n};\n\n// Leaderboard functionality\nlet leaderboard = JSON.parse(localStorage.getItem('otterRiverLeaderboard')) || [];\n\n// Fish types and their properties\nconst FISH_TYPES = {\n    normal: {\n        color: 0xFFD700, // Gold\n        points: 1,\n        speed: 0.3, // Increased from 0.15\n        scale: 1,\n        probability: 0.3\n    },\n    rainbow: {\n        color: 0xFF69B4, // Pink\n        points: 3,\n        speed: 0.4, // Increased from 0.2\n        scale: 1.2,\n        probability: 0.15\n    },\n    golden: {\n        color: 0xFFA500, // Orange\n        points: 5,\n        speed: 0.5, // Increased from 0.25\n        scale: 1.4,\n        probability: 0.1\n    },\n    emerald: {\n        color: 0x00FF00, // Green\n        points: 7,\n        speed: 0.6, // Increased from 0.3\n        scale: 1.6,\n        probability: 0.1\n    },\n    diamond: {\n        color: 0x00FFFF, // Cyan\n        points: 10,\n        speed: 0.7, // Increased from 0.35\n        scale: 1.8,\n        probability: 0.05\n    },\n    clam: {\n        color: 0xFFE4E1, // Misty Rose\n        points: 15,\n        speed: 0.2, // Increased from 0.1\n        scale: 1.2,\n        probability: 0.05,\n        isClam: true\n    },\n    seahorse: {\n        color: 0x9370DB, // Medium Purple\n        points: 8,\n        speed: 0.3, // Increased from 0.15\n        scale: 1.3,\n        probability: 0.1,\n        isSpecial: true\n    },\n    jellyfish: {\n        color: 0xFFB6C1, // Light Pink\n        points: 12,\n        speed: 0.4, // Increased from 0.2\n        scale: 1.5,\n        probability: 0.08,\n        isSpecial: true\n    },\n    starfish: {\n        color: 0xFF4500, // Orange Red\n        points: 6,\n        speed: 0.2, // Increased from 0.1\n        scale: 1.2,\n        probability: 0.07,\n        isSpecial: true\n    }\n};\n\n// Obstacle types and their properties\nconst OBSTACLE_TYPES = {\n    rock: {\n        geometry: new THREE.DodecahedronGeometry(1, 0),\n        color: 0x808080,\n        scale: 1,\n        probability: 0.3 // Increased probability\n    },\n    log: {\n        geometry: new THREE.CylinderGeometry(0.5, 0.5, 3, 8),\n        color: 0x8B4513,\n        scale: 1,\n        probability: 0.3 // Increased probability\n    },\n    boat: {\n        geometry: new THREE.BoxGeometry(2, 0.5, 4),\n        color: 0x8B4513,\n        scale: 1,\n        probability: 0.2\n    },\n    island: {\n        geometry: new THREE.ConeGeometry(2, 1, 8),\n        color: 0x90EE90,\n        scale: 1,\n        probability: 0.1\n    },\n    shark: {\n        geometry: new THREE.ConeGeometry(0.5, 2, 8),\n        color: 0x4682B4,\n        scale: 1,\n        probability: 0.1\n    }\n};\n\n// Initialize the game\nfunction init() {\n    // Create scene\n    scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x87CEEB);\n    scene.fog = new THREE.Fog(0x87CEEB, 20, 100);\n\n    // Create camera\n    camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.set(0, 15, 20);\n    camera.lookAt(0, 0, -100);\n    scene.add(camera);\n\n    // Create renderer\n    renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    document.getElementById('game-container').appendChild(renderer.domElement);\n\n    // Add lights\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(5, 5, 5);\n    directionalLight.castShadow = true;\n    directionalLight.shadow.mapSize.width = 2048;\n    directionalLight.shadow.mapSize.height = 2048;\n    scene.add(directionalLight);\n\n    // Create environment\n    createEnvironment();\n\n    // Create river\n    createRiver();\n\n    // Create otter\n    createOtter();\n\n    // Add event listeners\n    window.addEventListener('resize', onWindowResize);\n    window.addEventListener('keydown', onKeyDown);\n    window.addEventListener('keyup', onKeyUp);\n\n    // Reset game state\n    resetGameState();\n\n    // Show start screen\n    document.getElementById('start-screen').style.display = 'block';\n    document.getElementById('game-over').style.display = 'none';\n\n    // Start animation loop\n    animate();\n}\n\nfunction resetGameState() {\n    score = 0;\n    lives = 3;\n    gameStarted = false;\n    gameOver = false;\n    obstacles = [];\n    fish = [];\n    lastObstacleTime = 0;\n    lastFishTime = 0;\n    gameTime = 0;\n    level = 1;\n    baseSpeed = 0.2;\n    currentObstacleInterval = obstacleSpawnInterval;\n\n    // Update UI\n    updateScore();\n    updateLives();\n    updateLevel();\n    updateLeaderboard();\n}\n\n// Create the river\nfunction createRiver() {\n    // Create main water platform\n    const waterGeometry = new THREE.PlaneGeometry(600, 600);\n    const waterMaterial = new THREE.MeshStandardMaterial({\n        color: 0x0077be,\n        roughness: 0.1,\n        metalness: 0.2,\n        transparent: true,\n        opacity: 1\n    });\n    const water = new THREE.Mesh(waterGeometry, waterMaterial);\n    water.rotation.x = -Math.PI / 2;\n    water.position.y = -0.5;\n    water.position.z = -300;\n    water.receiveShadow = true;\n    scene.add(water);\n\n    // Add bottom cover\n    const bottomCoverGeometry = new THREE.BoxGeometry(600, 2, 600);\n    const bottomCoverMaterial = new THREE.MeshStandardMaterial({\n        color: 0x0077be,\n        roughness: 0.1,\n        metalness: 0.2\n    });\n    const bottomCover = new THREE.Mesh(bottomCoverGeometry, bottomCoverMaterial);\n    bottomCover.position.set(0, -2, -300);\n    bottomCover.receiveShadow = true;\n    scene.add(bottomCover);\n\n    // Main river\n    const riverGeometry = new THREE.PlaneGeometry(40, 600, 40, 100);\n    const riverMaterial = new THREE.MeshStandardMaterial({\n        color: 0x0077be,\n        roughness: 1.0, // Max roughness to remove all reflections\n        metalness: 0.0, // No metalness\n        transparent: true,\n        opacity: 0.9\n    });\n    river = new THREE.Mesh(riverGeometry, riverMaterial);\n    river.rotation.x = -Math.PI / 2;\n    river.position.z = -300;\n    river.position.y = 0.5;\n    river.receiveShadow = true;\n    scene.add(river);\n\n    // Add stream on the right side\n    const streamGeometry = new THREE.PlaneGeometry(15, 600, 20, 100);\n    const streamMaterial = new THREE.MeshStandardMaterial({\n        color: 0x00BFFF,\n        roughness: 1.0, // Max roughness to remove all reflections\n        metalness: 0.0, // No metalness\n        transparent: true,\n        opacity: 0.9\n    });\n    const stream = new THREE.Mesh(streamGeometry, streamMaterial);\n    stream.rotation.x = -Math.PI / 2;\n    stream.position.z = -300;\n    stream.position.y = 0.55;\n    stream.position.x = 50;\n    stream.receiveShadow = true;\n    scene.add(stream);\n\n    // Add stream on the left side\n    const stream2 = stream.clone();\n    stream2.position.x = -50;\n    scene.add(stream2);\n}\n\n// Create the otter\nfunction createOtter() {\n    otter = new THREE.Group();\n\n    // Body\n    const bodyGeometry = new THREE.SphereGeometry(0.5, 16, 16);\n    const bodyMaterial = new THREE.MeshStandardMaterial({\n        color: 0x8B4513,\n        roughness: 0.7,\n        metalness: 0.1\n    });\n    const body = new THREE.Mesh(bodyGeometry, bodyMaterial);\n    body.scale.set(1, 0.8, 1.2);\n    body.castShadow = true;\n    otter.add(body);\n\n    // Head\n    const headGeometry = new THREE.SphereGeometry(0.45, 16, 16);\n    const headMaterial = new THREE.MeshStandardMaterial({\n        color: 0x8B4513,\n        roughness: 0.7,\n        metalness: 0.1\n    });\n    const head = new THREE.Mesh(headGeometry, headMaterial);\n    head.position.set(0, 0.3, 0.8);\n    head.castShadow = true;\n    otter.add(head);\n\n    // Snout\n    const snoutGeometry = new THREE.SphereGeometry(0.25, 16, 16);\n    const snoutMaterial = new THREE.MeshStandardMaterial({\n        color: 0x8B4513,\n        roughness: 0.7,\n        metalness: 0.1\n    });\n    const snout = new THREE.Mesh(snoutGeometry, snoutMaterial);\n    snout.position.set(0, 0.2, 1.2);\n    snout.scale.set(1, 0.8, 0.6);\n    snout.castShadow = true;\n    otter.add(snout);\n\n    // Nose\n    const noseGeometry = new THREE.SphereGeometry(0.1, 8, 8);\n    const noseMaterial = new THREE.MeshStandardMaterial({ color: 0x000000 });\n    const nose = new THREE.Mesh(noseGeometry, noseMaterial);\n    nose.position.set(0, 0.2, 1.35);\n    otter.add(nose);\n\n    // Eyes\n    const eyeGeometry = new THREE.SphereGeometry(0.12, 8, 8);\n    const eyeMaterial = new THREE.MeshStandardMaterial({ color: 0x000000 });\n    const leftEye = new THREE.Mesh(eyeGeometry, eyeMaterial);\n    const rightEye = new THREE.Mesh(eyeGeometry, eyeMaterial);\n    leftEye.position.set(0.25, 0.4, 1.1);\n    rightEye.position.set(-0.25, 0.4, 1.1);\n    otter.add(leftEye);\n    otter.add(rightEye);\n\n    // Ears\n    const earGeometry = new THREE.SphereGeometry(0.15, 8, 8);\n    const earMaterial = new THREE.MeshStandardMaterial({\n        color: 0x8B4513,\n        roughness: 0.7,\n        metalness: 0.1\n    });\n    const leftEar = new THREE.Mesh(earGeometry, earMaterial);\n    const rightEar = new THREE.Mesh(earGeometry, earMaterial);\n    leftEar.position.set(0.3, 0.6, 0.9);\n    rightEar.position.set(-0.3, 0.6, 0.9);\n    otter.add(leftEar);\n    otter.add(rightEar);\n\n    // Tail\n    const tailGeometry = new THREE.SphereGeometry(0.4, 16, 16);\n    const tailMaterial = new THREE.MeshStandardMaterial({\n        color: 0x8B4513,\n        roughness: 0.7,\n        metalness: 0.1\n    });\n    const tail = new THREE.Mesh(tailGeometry, tailMaterial);\n    tail.position.set(0, 0.2, -1);\n    tail.scale.set(1.5, 0.2, 0.8); // Adjusted scale for long and skinny tail\n    tail.rotation.y = Math.PI / 2; // Rotate tail 90 degrees around Y axis\n    tail.castShadow = true;\n    otter.add(tail);\n\n    // Legs\n    const legGeometry = new THREE.SphereGeometry(0.2, 8, 8);\n    const legMaterial = new THREE.MeshStandardMaterial({\n        color: 0x8B4513,\n        roughness: 0.7,\n        metalness: 0.1\n    });\n\n    const positions = [\n        [0.4, -0.2, 0.5],   // Front right\n        [-0.4, -0.2, 0.5],  // Front left\n        [0.4, -0.2, -0.5],  // Back right\n        [-0.4, -0.2, -0.5]  // Back left\n    ];\n\n    positions.forEach(pos => {\n        const leg = new THREE.Mesh(legGeometry, legMaterial);\n        leg.position.set(...pos);\n        leg.castShadow = true;\n        otter.add(leg);\n    });\n\n    // Only add the top hat and brim if unlocked and checkbox is checked\n    if (localStorage.getItem('topHatUnlocked') === 'true' && document.getElementById('top-hat-toggle').checked) {\n        // Top Hat\n        const hatGeometry = new THREE.CylinderGeometry(0.3, 0.3, 0.5, 16);\n        const hatMaterial = new THREE.MeshStandardMaterial({ color: 0x000000 });\n        const hat = new THREE.Mesh(hatGeometry, hatMaterial);\n        hat.position.set(0, 0.8, 0.8);\n        hat.castShadow = true;\n        hat.userData = { type: 'hat' };\n        otter.add(hat);\n\n        // Brim\n        const brimGeometry = new THREE.CylinderGeometry(0.4, 0.4, 0.1, 16);\n        const brimMaterial = new THREE.MeshStandardMaterial({ color: 0x000000 });\n        const brim = new THREE.Mesh(brimGeometry, brimMaterial);\n        brim.position.set(0, 0.6, 0.8);\n        brim.castShadow = true;\n        brim.userData = { type: 'brim' };\n        otter.add(brim);\n    }\n\n    // Only add the crown if unlocked and toggle is checked\n    if (localStorage.getItem('crownUnlocked') === 'true' && document.getElementById('crown-toggle') && document.getElementById('crown-toggle').checked) {\n        const crownGroup = new THREE.Group();\n        const bandGeometry = new THREE.TorusGeometry(0.38, 0.10, 12, 32);\n        const bandMaterial = new THREE.MeshStandardMaterial({ color: 0xFFD700, metalness: 0.8, roughness: 0.2 });\n        const band = new THREE.Mesh(bandGeometry, bandMaterial);\n        band.position.set(0, 0.75, 0.8);\n        band.rotation.x = Math.PI / 2;\n        band.userData = { type: 'crown-band' };\n        crownGroup.add(band);\n        for (let i = 0; i < 3; i++) {\n            const triangleGeometry = new THREE.ConeGeometry(0.3, 0.8, 3);\n            const triangleMaterial = new THREE.MeshStandardMaterial({ color: 0xFFD700, metalness: 0.8, roughness: 0.2 });\n            const triangle = new THREE.Mesh(triangleGeometry, triangleMaterial);\n            const angle = (i / 3) * Math.PI * 2;\n            triangle.position.set(Math.cos(angle) * 0.3, 1.05, 0.8 + Math.sin(angle) * 0.3);\n            triangle.rotation.x = 0;\n            triangle.userData = { type: 'crown-triangle' };\n            crownGroup.add(triangle);\n        }\n        crownGroup.userData = { type: 'crown' };\n        otter.add(crownGroup);\n    }\n\n    // Set initial position\n    otter.position.set(0, 0.25, 0);\n    otter.rotation.y = Math.PI;\n    scene.add(otter);\n}\n\n// Create an obstacle\nfunction createObstacle() {\n    if (!gameStarted || gameOver) return;\n\n    // Select obstacle type based on probability\n    const random = Math.random();\n    let cumulativeProbability = 0;\n    let selectedType = 'rock';\n\n    for (const [type, properties] of Object.entries(OBSTACLE_TYPES)) {\n        cumulativeProbability += properties.probability;\n        if (random <= cumulativeProbability) {\n            selectedType = type;\n            break;\n        }\n    }\n\n    const obstacleProperties = OBSTACLE_TYPES[selectedType];\n    const obstacle = new THREE.Mesh(\n        obstacleProperties.geometry,\n        new THREE.MeshStandardMaterial({\n            color: obstacleProperties.color,\n            roughness: 0.8,\n            metalness: 0.2\n        })\n    );\n    \n    // Random position across the river\n    obstacle.position.x = (Math.random() - 0.5) * 40;\n    obstacle.position.y = 0.5;\n    obstacle.position.z = -60;\n    \n    // Random rotation\n    obstacle.rotation.x = Math.random() * Math.PI;\n    obstacle.rotation.y = Math.random() * Math.PI;\n    obstacle.rotation.z = Math.random() * Math.PI;\n    \n    obstacle.scale.set(\n        obstacleProperties.scale,\n        obstacleProperties.scale,\n        obstacleProperties.scale\n    );\n    \n    obstacle.castShadow = true;\n    obstacle.userData = { type: 'obstacle', obstacleType: selectedType };\n    scene.add(obstacle);\n    obstacles.push(obstacle);\n}\n\n// Create a fish\nfunction createFish() {\n    if (!gameStarted || gameOver) return;\n\n    // Select fish type based on probability\n    const random = Math.random();\n    let cumulativeProbability = 0;\n    let selectedType = 'normal';\n\n    for (const [type, properties] of Object.entries(FISH_TYPES)) {\n        cumulativeProbability += properties.probability;\n        if (random <= cumulativeProbability) {\n            selectedType = type;\n            break;\n        }\n    }\n\n    const fishProperties = FISH_TYPES[selectedType];\n    const fishGroup = new THREE.Group();\n\n    if (fishProperties.isClam) {\n        // Create clam\n        const shellGeometry = new THREE.SphereGeometry(0.4, 16, 16);\n        const shellMaterial = new THREE.MeshStandardMaterial({\n            color: fishProperties.color,\n            roughness: 0.3,\n            metalness: 0.8\n        });\n        const shell = new THREE.Mesh(shellGeometry, shellMaterial);\n        shell.scale.set(1, 0.6, 0.8);\n        shell.castShadow = true;\n        fishGroup.add(shell);\n\n        // Add pearl\n        const pearlGeometry = new THREE.SphereGeometry(0.1, 8, 8);\n        const pearlMaterial = new THREE.MeshStandardMaterial({\n            color: 0xFFFFFF,\n            roughness: 0.1,\n            metalness: 0.9\n        });\n        const pearl = new THREE.Mesh(pearlGeometry, pearlMaterial);\n        pearl.position.set(0, 0.1, 0);\n        fishGroup.add(pearl);\n    } else if (fishProperties.isSpecial) {\n        if (selectedType === 'seahorse') {\n            // Create seahorse\n            const bodyGeometry = new THREE.CapsuleGeometry(0.2, 0.8, 4, 8);\n            const bodyMaterial = new THREE.MeshStandardMaterial({\n                color: fishProperties.color,\n                roughness: 0.3,\n                metalness: 0.8\n            });\n            const body = new THREE.Mesh(bodyGeometry, bodyMaterial);\n            body.rotation.x = Math.PI / 2;\n            body.castShadow = true;\n            fishGroup.add(body);\n\n            // Add head\n            const headGeometry = new THREE.SphereGeometry(0.2, 8, 8);\n            const head = new THREE.Mesh(headGeometry, bodyMaterial);\n            head.position.set(0, 0.5, 0);\n            fishGroup.add(head);\n\n            // Add tail\n            const tailGeometry = new THREE.ConeGeometry(0.1, 0.4, 4);\n            const tail = new THREE.Mesh(tailGeometry, bodyMaterial);\n            tail.position.set(0, -0.5, 0);\n            tail.rotation.x = -Math.PI / 2;\n            fishGroup.add(tail);\n        } else if (selectedType === 'jellyfish') {\n            // Create jellyfish\n            const bodyGeometry = new THREE.SphereGeometry(0.3, 16, 16);\n            const bodyMaterial = new THREE.MeshStandardMaterial({\n                color: fishProperties.color,\n                roughness: 0.3,\n                metalness: 0.8,\n                transparent: true,\n                opacity: 0.8\n            });\n            const body = new THREE.Mesh(bodyGeometry, bodyMaterial);\n            body.scale.set(1, 0.8, 1);\n            body.castShadow = true;\n            fishGroup.add(body);\n\n            // Add tentacles\n            for (let i = 0; i < 8; i++) {\n                const tentacleGeometry = new THREE.CylinderGeometry(0.02, 0.02, 0.5, 4);\n                const tentacle = new THREE.Mesh(tentacleGeometry, bodyMaterial);\n                const angle = (i / 8) * Math.PI * 2;\n                tentacle.position.set(\n                    Math.cos(angle) * 0.2,\n                    -0.4,\n                    Math.sin(angle) * 0.2\n                );\n                tentacle.rotation.x = Math.PI / 2;\n                fishGroup.add(tentacle);\n            }\n        } else if (selectedType === 'starfish') {\n            // Create starfish\n            const starGeometry = new THREE.CircleGeometry(0.4, 5);\n            const starMaterial = new THREE.MeshStandardMaterial({\n                color: fishProperties.color,\n                roughness: 0.3,\n                metalness: 0.8\n            });\n            const star = new THREE.Mesh(starGeometry, starMaterial);\n            star.rotation.x = -Math.PI / 2;\n            star.castShadow = true;\n            fishGroup.add(star);\n        }\n    } else {\n        // Regular fish body\n        const bodyGeometry = new THREE.CapsuleGeometry(0.3, 1, 4, 8);\n        const bodyMaterial = new THREE.MeshStandardMaterial({\n            color: fishProperties.color,\n            roughness: 0.3,\n            metalness: 0.8\n        });\n        const body = new THREE.Mesh(bodyGeometry, bodyMaterial);\n        body.scale.set(1, 0.6, 1.2); // Adjusted proportions\n        body.castShadow = true;\n        fishGroup.add(body);\n\n        // Tail\n        const tailGeometry = new THREE.ConeGeometry(0.4, 0.8, 4);\n        const tailMaterial = new THREE.MeshStandardMaterial({\n            color: fishProperties.color,\n            roughness: 0.3,\n            metalness: 0.8\n        });\n        const tail = new THREE.Mesh(tailGeometry, tailMaterial);\n        tail.position.set(0, 0, -0.8);\n        tail.rotation.x = Math.PI / 2;\n        tail.scale.set(1, 0.8, 1); // Adjusted tail proportions\n        tail.castShadow = true;\n        fishGroup.add(tail);\n\n        // Dorsal fin (top fin)\n        const dorsalFinGeometry = new THREE.ConeGeometry(0.15, 0.4, 4);\n        const dorsalFin = new THREE.Mesh(dorsalFinGeometry, tailMaterial);\n        dorsalFin.position.set(0, 0.3, 0);\n        dorsalFin.rotation.x = -Math.PI / 2;\n        dorsalFin.castShadow = true;\n        fishGroup.add(dorsalFin);\n\n        // Pectoral fins (side fins)\n        const finGeometry = new THREE.ConeGeometry(0.2, 0.4, 4);\n        const finMaterial = new THREE.MeshStandardMaterial({\n            color: fishProperties.color,\n            roughness: 0.3,\n            metalness: 0.8\n        });\n        \n        // Left pectoral fin\n        const leftFin = new THREE.Mesh(finGeometry, finMaterial);\n        leftFin.position.set(0.4, 0, 0.2);\n        leftFin.rotation.z = -Math.PI / 2;\n        leftFin.rotation.y = Math.PI / 4;\n        leftFin.castShadow = true;\n        fishGroup.add(leftFin);\n        \n        // Right pectoral fin\n        const rightFin = new THREE.Mesh(finGeometry, finMaterial);\n        rightFin.position.set(-0.4, 0, 0.2);\n        rightFin.rotation.z = Math.PI / 2;\n        rightFin.rotation.y = -Math.PI / 4;\n        rightFin.castShadow = true;\n        fishGroup.add(rightFin);\n\n        // Pelvic fins (bottom fins)\n        const pelvicFinGeometry = new THREE.ConeGeometry(0.15, 0.3, 4);\n        const pelvicFinMaterial = new THREE.MeshStandardMaterial({\n            color: fishProperties.color,\n            roughness: 0.3,\n            metalness: 0.8\n        });\n\n        // Left pelvic fin\n        const leftPelvicFin = new THREE.Mesh(pelvicFinGeometry, pelvicFinMaterial);\n        leftPelvicFin.position.set(0.2, -0.2, 0.2);\n        leftPelvicFin.rotation.x = Math.PI / 2;\n        leftPelvicFin.rotation.z = Math.PI / 4;\n        leftPelvicFin.castShadow = true;\n        fishGroup.add(leftPelvicFin);\n\n        // Right pelvic fin\n        const rightPelvicFin = new THREE.Mesh(pelvicFinGeometry, pelvicFinMaterial);\n        rightPelvicFin.position.set(-0.2, -0.2, 0.2);\n        rightPelvicFin.rotation.x = Math.PI / 2;\n        rightPelvicFin.rotation.z = -Math.PI / 4;\n        rightPelvicFin.castShadow = true;\n        fishGroup.add(rightPelvicFin);\n\n        // Eyes\n        const eyeGeometry = new THREE.SphereGeometry(0.08, 8, 8);\n        const eyeMaterial = new THREE.MeshStandardMaterial({ color: 0x000000 });\n        \n        // Left eye\n        const leftEye = new THREE.Mesh(eyeGeometry, eyeMaterial);\n        leftEye.position.set(0.2, 0.1, 0.4);\n        fishGroup.add(leftEye);\n        \n        // Right eye\n        const rightEye = new THREE.Mesh(eyeGeometry, eyeMaterial);\n        rightEye.position.set(-0.2, 0.1, 0.4);\n        fishGroup.add(rightEye);\n\n        // Mouth\n        const mouthGeometry = new THREE.ConeGeometry(0.1, 0.2, 8);\n        const mouthMaterial = new THREE.MeshStandardMaterial({ color: 0x000000 });\n        const mouth = new THREE.Mesh(mouthGeometry, mouthMaterial);\n        mouth.position.set(0, 0, 0.6);\n        mouth.rotation.x = Math.PI / 2;\n        fishGroup.add(mouth);\n    }\n\n    // Position the fish\n    fishGroup.position.x = (Math.random() - 0.5) * 40;\n    fishGroup.position.y = 0.5;\n    fishGroup.position.z = -60;\n    \n    // Random rotation\n    fishGroup.rotation.y = Math.random() * Math.PI * 2;\n    \n    // Scale based on fish type\n    fishGroup.scale.set(\n        fishProperties.scale,\n        fishProperties.scale,\n        fishProperties.scale\n    );\n    \n    fishGroup.userData = { type: selectedType };\n\n    // Add point light to make it glow\n    const fishLight = new THREE.PointLight(0xffffff, 1, 2);\n    fishLight.position.set(0, 0, 0);\n    fishGroup.add(fishLight);\n\n    scene.add(fishGroup);\n    fish.push(fishGroup);\n}\n\n// Handle window resize\nfunction onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n}\n\n// Handle key down events\nfunction onKeyDown(event) {\n    if (keys.hasOwnProperty(event.key)) {\n        keys[event.key] = true;\n    }\n}\n\n// Handle key up events\nfunction onKeyUp(event) {\n    if (keys.hasOwnProperty(event.key)) {\n        keys[event.key] = false;\n    }\n}\n\n// Check for collisions\nfunction checkCollisions() {\n    if (!gameStarted || gameOver) return;\n\n    // Check obstacle collisions\n    for (let i = obstacles.length - 1; i >= 0; i--) {\n        const obstacle = obstacles[i];\n        const distance = otter.position.distanceTo(obstacle.position);\n        \n        if (distance < 1.5) {\n            // Collision with obstacle\n            lives--;\n            updateLives();\n            scene.remove(obstacle);\n            obstacles.splice(i, 1);\n            \n            if (lives <= 0) {\n                endGame();\n            }\n        }\n    }\n\n    // Check fish collisions\n    for (let i = fish.length - 1; i >= 0; i--) {\n        const fishObj = fish[i];\n        const distance = otter.position.distanceTo(fishObj.position);\n        \n        if (distance < 1.5) {\n            // Collect fish\n            const fishType = fishObj.userData.type;\n            const fishPoints = FISH_TYPES[fishType].points;\n            score += fishPoints;\n            updateScore();\n            scene.remove(fishObj);\n            fish.splice(i, 1);\n        }\n    }\n}\n\n// End game function\nfunction endGame() {\n    gameOver = true;\n    gameStarted = false;\n    \n    // Clear timer\n    if (timerInterval) {\n        clearInterval(timerInterval);\n    }\n    \n    // Show game over screen\n    document.getElementById('game-over').style.display = 'block';\n    document.getElementById('final-score').textContent = `Final Score: ${score}`;\n    document.getElementById('name-input').style.display = 'block';\n    \n    // Allow player to input name\n    const nameInput = document.getElementById('player-name');\n    nameInput.focus();\n    \n    // Save score, level, and time to localStorage\n    const scores = JSON.parse(localStorage.getItem('scores') || '[]');\n    scores.push({ name: nameInput.value.trim() || 'Anonymous', score: score, level: level, time: Math.round(gameTime) });\n    localStorage.setItem('scores', JSON.stringify(scores));\n    \n    // Unlock top hat if score >= 100\n    if (score >= 100) {\n        localStorage.setItem('topHatUnlocked', 'true');\n    }\n    // Unlock crown if score >= 300\n    if (score >= 300) {\n        localStorage.setItem('crownUnlocked', 'true');\n    }\n    updateUnlockables();\n    // Update leaderboard\n    updateLeaderboard();\n}\n\n// Update game state\nfunction update() {\n    if (!gameStarted || gameOver) return;\n\n    // Move otter based on key presses\n    const moveSpeed = 0.2;\n    let moving = false;\n    let targetRotation = otter.rotation.y;\n\n    if (keys.ArrowUp || keys.w) {\n        otter.position.z -= moveSpeed;\n        targetRotation = Math.PI;\n        moving = true;\n    }\n    if (keys.ArrowDown || keys.s) {\n        otter.position.z += moveSpeed;\n        targetRotation = 0;\n        moving = true;\n    }\n    if (keys.ArrowLeft || keys.a) {\n        otter.position.x -= moveSpeed;\n        targetRotation = -Math.PI / 2;\n        moving = true;\n    }\n    if (keys.ArrowRight || keys.d) {\n        otter.position.x += moveSpeed;\n        targetRotation = Math.PI / 2;\n        moving = true;\n    }\n\n    // Smoothly rotate otter to face movement direction\n    if (moving) {\n        otter.rotation.y = THREE.MathUtils.lerp(otter.rotation.y, targetRotation, 0.2);\n    }\n\n    // Keep otter within bounds\n    otter.position.x = Math.max(-20, Math.min(20, otter.position.x));\n    otter.position.z = Math.max(-49, Math.min(49, otter.position.z));\n\n    // Calculate current speed based on level\n    const currentSpeed = baseSpeed * (1 + (level - 1) * 0.15); // Increased speed progression\n\n    // Update obstacle spawn interval based on level\n    currentObstacleInterval = Math.max(100, obstacleSpawnInterval - (level * 20)); // Decreases by 20ms per level, minimum 100ms\n\n    // Spawn obstacles and fish\n    const currentTime = Date.now();\n    if (currentTime - lastObstacleTime > currentObstacleInterval) {\n        createObstacle();\n        // Chance to spawn additional obstacles based on level\n        if (Math.random() < (level * 0.1)) { // 10% chance per level to spawn extra obstacle\n            createObstacle();\n        }\n        lastObstacleTime = currentTime;\n    }\n\n    if (currentTime - lastFishTime > 1500) {\n        createFish();\n        lastFishTime = currentTime;\n    }\n\n    // Update obstacles with level-based speed\n    for (let i = obstacles.length - 1; i >= 0; i--) {\n        obstacles[i].position.z += currentSpeed;\n        \n        if (obstacles[i].position.z > 10) {\n            scene.remove(obstacles[i]);\n            obstacles.splice(i, 1);\n        }\n    }\n\n    // Update fish with level-based speed\n    for (let i = fish.length - 1; i >= 0; i--) {\n        const fishObj = fish[i];\n        const fishType = fishObj.userData.type;\n        const fishSpeed = FISH_TYPES[fishType].speed * currentSpeed;\n        \n        fishObj.position.z += fishSpeed;\n        \n        // Add gentle up and down motion\n        fishObj.position.y = 0.5 + Math.sin(Date.now() * 0.003 + i) * 0.1;\n        \n        if (fishObj.position.z > 10) {\n            scene.remove(fishObj);\n            fish.splice(i, 1);\n        }\n    }\n\n    // Update timer and date\n    gameTime += 1/120; // Slowed down timer\n    const minutes = Math.floor(gameTime / 60);\n    const seconds = Math.floor(gameTime % 60);\n    document.getElementById('timer').textContent = `Time: ${minutes}:${seconds.toString().padStart(2, '0')}`;\n    document.getElementById('date').textContent = new Date().toLocaleDateString();\n\n    // Check collisions\n    checkCollisions();\n\n    // Update environment\n    updateEnvironment();\n}\n\n// Animation loop\nfunction animate() {\n    requestAnimationFrame(animate);\n    update();\n    renderer.render(scene, camera);\n}\n\n// Start game function\nwindow.startGame = function() {\n    if (gameStarted) return;\n    \n    gameStarted = true;\n    gameOver = false;\n    \n    // Hide start screen\n    document.getElementById('start-screen').style.display = 'none';\n    \n    // Start timer for level progression\n    timerInterval = setInterval(() => {\n        level++;\n        updateLevel();\n        showLevelUpMessage();\n        // Increase base speed slightly with each level\n        baseSpeed += 0.02;\n    }, 15000); // Changed from 30000 to 15000 (15 seconds)\n    \n    // Start spawning obstacles and fish\n    lastObstacleTime = Date.now();\n    lastFishTime = Date.now();\n};\n\n// Restart game function\nwindow.restartGame = function() {\n    // Clear existing game elements\n    obstacles.forEach(obstacle => scene.remove(obstacle));\n    fish.forEach(fish => scene.remove(fish));\n    \n    // Clear timer\n    if (timerInterval) {\n        clearInterval(timerInterval);\n    }\n    \n    // Reset game state\n    resetGameState();\n    \n    // Hide game over screen\n    document.getElementById('game-over').style.display = 'none';\n    \n    // Start new game\n    startGame();\n};\n\n// Update score display\nfunction updateScore() {\n    document.getElementById('score').textContent = `Score: ${score}`;\n}\n\n// Update lives display\nfunction updateLives() {\n    document.getElementById('lives').textContent = `Lives: ${lives}`;\n}\n\n// Update level display\nfunction updateLevel() {\n    document.getElementById('level').textContent = `Level: ${level}`;\n}\n\n// Leaderboard functionality\nfunction updateLeaderboard() {\n    const leaderboardList = document.getElementById('top-scores');\n    const startScores = document.getElementById('start-scores');\n    leaderboardList.innerHTML = '';\n    startScores.innerHTML = '';\n    const scores = JSON.parse(localStorage.getItem('scores') || '[]');\n    scores.sort((a, b) => b.score - a.score);\n    scores.slice(0, 5).forEach(score => {\n        if (score.name !== 'Anonymous') {\n            const li = document.createElement('li');\n            li.textContent = `${score.name}: ${score.score} points, Level ${score.level}, Time ${score.time}`;\n            leaderboardList.appendChild(li);\n            startScores.appendChild(li.cloneNode(true));\n        }\n    });\n}\n\n// Submit score function\nwindow.submitScore = function() {\n    const nameInput = document.getElementById('player-name');\n    const playerName = nameInput.value.trim() || 'Anonymous';\n    \n    // Add score to leaderboard\n    const scores = JSON.parse(localStorage.getItem('scores') || '[]');\n    scores.push({ name: playerName, score: score, level: level, time: Math.round(gameTime) });\n    localStorage.setItem('scores', JSON.stringify(scores));\n    \n    // Update leaderboard display\n    updateLeaderboard();\n    \n    // Clear input\n    nameInput.value = '';\n};\n\n// Reset leaderboard\nfunction resetLeaderboard() {\n    localStorage.removeItem('scores');\n    updateLeaderboard();\n}\n\n// Call resetLeaderboard on game initialization\nwindow.onload = function() {\n    init();\n    resetLeaderboard();\n    updateUnlockables();\n};\n\n// Create the scene environment\nfunction createEnvironment() {\n    // Create sun\n    const sunGeometry = new THREE.SphereGeometry(5, 32, 32);\n    const sunMaterial = new THREE.MeshBasicMaterial({\n        color: 0xffff00,\n        transparent: true,\n        opacity: 0.8\n    });\n    const sun = new THREE.Mesh(sunGeometry, sunMaterial);\n    sun.position.set(30, 30, -50);\n    scene.add(sun);\n\n    // Add sun glow\n    const sunGlowGeometry = new THREE.SphereGeometry(6, 32, 32);\n    const sunGlowMaterial = new THREE.MeshBasicMaterial({\n        color: 0xffff00,\n        transparent: true,\n        opacity: 0.3\n    });\n    const sunGlow = new THREE.Mesh(sunGlowGeometry, sunGlowMaterial);\n    sunGlow.position.set(30, 30, -50); // Ensure sun glow does not overlap with water\n    scene.add(sunGlow);\n\n    // Create clouds\n    const cloudGroup = new THREE.Group();\n    const cloudMaterial = new THREE.MeshStandardMaterial({\n        color: 0xFFFFFF,\n        transparent: true,\n        opacity: 0.9,\n        roughness: 0.8,\n        metalness: 0.2\n    });\n\n    // Create multiple clouds\n    for (let i = 0; i < 10; i++) {\n        const cloud = createCloud(cloudMaterial);\n        // Position clouds randomly in the sky, but below the sun\n        cloud.position.set(\n            (Math.random() - 0.5) * 300,\n            20 + Math.random() * 15, // Lowered cloud height\n            -100 - Math.random() * 200\n        );\n        cloud.scale.set(\n            1 + Math.random(),\n            1 + Math.random(),\n            1 + Math.random()\n        );\n        cloud.userData = {\n            speed: 0.02 + Math.random() * 0.03,\n            initialX: cloud.position.x\n        };\n        cloudGroup.add(cloud);\n    }\n\n    scene.add(cloudGroup);\n\n    // Store references for animation\n    scene.userData.sunGroup = sun;\n    scene.userData.cloudGroup = cloudGroup;\n}\n\nfunction createCloud(material) {\n    const cloudGroup = new THREE.Group();\n    \n    // Create multiple spheres to form a cloud\n    const numSpheres = 5 + Math.floor(Math.random() * 4);\n    for (let i = 0; i < numSpheres; i++) {\n        const radius = 3 + Math.random() * 2;\n        const geometry = new THREE.SphereGeometry(radius, 8, 8);\n        const sphere = new THREE.Mesh(geometry, material);\n        \n        // Position spheres to form a cloud shape\n        sphere.position.set(\n            (Math.random() - 0.5) * 8,\n            (Math.random() - 0.5) * 4,\n            (Math.random() - 0.5) * 8\n        );\n        \n        cloudGroup.add(sphere);\n    }\n    \n    return cloudGroup;\n}\n\n// Update the environment movement\nfunction updateEnvironment() {\n    if (!gameStarted || gameOver) return;\n\n    // Animate river surface\n    if (river) {\n        const time = Date.now() * 0.001;\n        const vertices = river.geometry.attributes.position.array;\n        \n        for (let i = 0; i < vertices.length; i += 3) {\n            const x = vertices[i];\n            const z = vertices[i + 2];\n            vertices[i + 1] = Math.sin(x * 0.5 + time) * 0.2 + Math.sin(z * 0.5 + time) * 0.2;\n        }\n        \n        river.geometry.attributes.position.needsUpdate = true;\n        river.geometry.computeVertexNormals();\n    }\n\n    // Animate sun\n    if (scene.userData.sunGroup) {\n        const sun = scene.userData.sunGroup;\n        sun.rotation.y += 0.0005; // Slowed down rotation\n        sun.rotation.z = Math.sin(Date.now() * 0.0003) * 0.05; // Reduced wobble\n    }\n\n    // Animate clouds\n    if (scene.userData.cloudGroup) {\n        const cloudGroup = scene.userData.cloudGroup;\n        cloudGroup.children.forEach(cloud => {\n            // Move cloud\n            cloud.position.x += cloud.userData.speed;\n            \n            // Reset cloud position if it goes too far\n            if (cloud.position.x > 200) {\n                cloud.position.x = -200;\n            }\n            \n            // Add gentle floating motion\n            cloud.position.y += Math.sin(Date.now() * 0.001 + cloud.position.x) * 0.01;\n        });\n    }\n}\n\nfunction showLevelUpMessage() {\n    let msg = document.getElementById('level-up-message');\n    if (!msg) {\n        msg = document.createElement('div');\n        msg.id = 'level-up-message';\n        document.body.appendChild(msg);\n    }\n    msg.textContent = `Level ${level}!`;\n    msg.style.display = 'block';\n    msg.style.opacity = '1';\n    setTimeout(() => {\n        msg.style.opacity = '0';\n        setTimeout(() => { msg.style.display = 'none'; }, 500);\n    }, 1000);\n}\n\n// Update unlockables section on start menu\nfunction updateUnlockables() {\n    const unlocked = localStorage.getItem('topHatUnlocked') === 'true';\n    const status = document.getElementById('top-hat-status');\n    const toggle = document.getElementById('top-hat-toggle');\n    if (status) {\n        if (unlocked) {\n            status.textContent = 'Unlocked!';\n            status.style.color = '#4CAF50';\n            toggle.disabled = false;\n        } else {\n            status.textContent = 'Locked (Score 100+ in a game)';\n            status.style.color = '#ff00ff';\n            toggle.disabled = true;\n        }\n    }\n    const crownStatus = document.getElementById('crown-status');\n    const crownToggle = document.getElementById('crown-toggle');\n    const crownUnlocked = localStorage.getItem('crownUnlocked') === 'true';\n    if (crownStatus) {\n        if (crownUnlocked) {\n            crownStatus.textContent = 'Unlocked!';\n            crownStatus.style.color = '#FFD700';\n            crownToggle.disabled = false;\n        } else {\n            crownStatus.textContent = 'Locked (Score 300+ in a game)';\n            crownStatus.style.color = '#ff00ff';\n            crownToggle.disabled = true;\n        }\n    }\n}\n\n// Add event listener for top hat toggle\ndocument.getElementById('top-hat-toggle').addEventListener('change', function() {\n    if (this.checked) {\n        // Add top hat to otter\n        const hatGeometry = new THREE.CylinderGeometry(0.3, 0.3, 0.5, 16);\n        const hatMaterial = new THREE.MeshStandardMaterial({ color: 0x000000 });\n        const hat = new THREE.Mesh(hatGeometry, hatMaterial);\n        hat.position.set(0, 0.8, 0.8);\n        hat.castShadow = true;\n        hat.userData = { type: 'hat' };\n        otter.add(hat);\n\n        // Add brim\n        const brimGeometry = new THREE.CylinderGeometry(0.4, 0.4, 0.1, 16);\n        const brimMaterial = new THREE.MeshStandardMaterial({ color: 0x000000 });\n        const brim = new THREE.Mesh(brimGeometry, brimMaterial);\n        brim.position.set(0, 0.6, 0.8);\n        brim.castShadow = true;\n        brim.userData = { type: 'brim' };\n        otter.add(brim);\n    } else {\n        // Remove top hat and brim from otter\n        const hat = otter.children.find(child => child.userData && child.userData.type === 'hat');\n        if (hat) otter.remove(hat);\n        const brim = otter.children.find(child => child.userData && child.userData.type === 'brim');\n        if (brim) otter.remove(brim);\n    }\n    // Remove any existing crown\n    const crown = otter.children.find(child => child.userData && child.userData.type === 'crown');\n    if (crown) otter.remove(crown);\n    const crownToggle = document.getElementById('crown-toggle');\n    if (crownToggle) crownToggle.checked = false;\n});\n\n// Add event listener for crown toggle\nif (document.getElementById('crown-toggle')) {\n    document.getElementById('crown-toggle').addEventListener('change', function() {\n        // Remove any existing crown or top hat\n        const crown = otter.children.find(child => child.userData && child.userData.type === 'crown');\n        if (crown) otter.remove(crown);\n        const hat = otter.children.find(child => child.userData && child.userData.type === 'hat');\n        if (hat) otter.remove(hat);\n        const brim = otter.children.find(child => child.userData && child.userData.type === 'brim');\n        if (brim) otter.remove(brim);\n        if (this.checked) {\n            // Add crown with triangles covering otter's head fully and aligned with torus\n            const crownGroup = new THREE.Group();\n            const bandGeometry = new THREE.TorusGeometry(0.38, 0.10, 12, 32);\n            const bandMaterial = new THREE.MeshStandardMaterial({ color: 0xFFD700, metalness: 0.8, roughness: 0.2 });\n            const band = new THREE.Mesh(bandGeometry, bandMaterial);\n            band.position.set(0, 0.75, 0.8);\n            band.rotation.x = Math.PI / 2;\n            band.userData = { type: 'crown-band' };\n            crownGroup.add(band);\n            for (let i = 0; i < 3; i++) {\n                const triangleGeometry = new THREE.ConeGeometry(0.3, 0.8, 3);\n                const triangleMaterial = new THREE.MeshStandardMaterial({ color: 0xFFD700, metalness: 0.8, roughness: 0.2 });\n                const triangle = new THREE.Mesh(triangleGeometry, triangleMaterial);\n                const angle = (i / 3) * Math.PI * 2;\n                triangle.position.set(Math.cos(angle) * 0.3, 1.05, 0.8 + Math.sin(angle) * 0.3);\n                triangle.rotation.x = 0;\n                triangle.userData = { type: 'crown-triangle' };\n                crownGroup.add(triangle);\n            }\n            crownGroup.userData = { type: 'crown' };\n            otter.add(crownGroup);\n            // Uncheck top hat if checked\n            const topHatToggle = document.getElementById('top-hat-toggle');\n            if (topHatToggle) topHatToggle.checked = false;\n        }\n    });\n}\n\nfunction returnToMenu() {\n    document.getElementById('game-over').style.display = 'none';\n    document.getElementById('start-screen').style.display = 'block';\n    resetGameState();\n    // Remove top hat from otter if it was added\n    if (otter) {\n        const hat = otter.children.find(child => child.userData && child.userData.type === 'hat');\n        if (hat) {\n            otter.remove(hat);\n        }\n    }\n    // Stop the game loop\n    gameStarted = false;\n    gameOver = true;\n    // Clear existing game elements\n    obstacles.forEach(obstacle => scene.remove(obstacle));\n    fish.forEach(fish => scene.remove(fish));\n    obstacles = [];\n    fish = [];\n    // Reset otter position\n    otter.position.set(0, 0.25, 0);\n    otter.rotation.y = Math.PI;\n    return false;\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}