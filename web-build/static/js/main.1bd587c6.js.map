{"version":3,"file":"static/js/main.1bd587c6.js","mappings":"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","sources":["src/main.js","src/Game.tsx","App.tsx","webpack/bootstrap","webpack/runtime/chunk loaded","webpack/runtime/compat get default export","webpack/runtime/define property getters","webpack/runtime/hasOwnProperty shorthand","webpack/runtime/make namespace object","webpack/runtime/jsonp chunk loading","webpack/startup"],"sourcesContent":["import * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\n\n// Game state\nlet scene, camera, renderer;\nlet otter, river;\nlet score = 0;\nlet lives = 3;\nlet gameStarted = false;\nlet gameOver = false;\nlet obstacles = [];\nlet fish = [];\nlet lastObstacleTime = 0;\nlet lastFishTime = 0;\nlet gameTime = 0;\nlet level = 1;\nlet timerInterval;\nlet baseSpeed = 0.2;\nlet obstacleSpawnInterval = 300; // Base interval for obstacle spawning (in ms)\nlet currentObstacleInterval = obstacleSpawnInterval; // Current interval that changes with level\n\n// Movement controls\nconst keys = {\n    ArrowUp: false,\n    ArrowDown: false,\n    ArrowLeft: false,\n    ArrowRight: false,\n    w: false,\n    a: false,\n    s: false,\n    d: false\n};\n\n// Leaderboard functionality\nlet leaderboard = JSON.parse(localStorage.getItem('otterRiverLeaderboard')) || [];\n\n// Fish types and their properties\nconst FISH_TYPES = {\n    normal: {\n        color: 0xFFD700, // Gold\n        points: 1,\n        speed: 0.3, // Increased from 0.15\n        scale: 1,\n        probability: 0.3\n    },\n    rainbow: {\n        color: 0xFF69B4, // Pink\n        points: 3,\n        speed: 0.4, // Increased from 0.2\n        scale: 1.2,\n        probability: 0.15\n    },\n    golden: {\n        color: 0xFFA500, // Orange\n        points: 5,\n        speed: 0.5, // Increased from 0.25\n        scale: 1.4,\n        probability: 0.1\n    },\n    emerald: {\n        color: 0x00FF00, // Green\n        points: 7,\n        speed: 0.6, // Increased from 0.3\n        scale: 1.6,\n        probability: 0.1\n    },\n    diamond: {\n        color: 0x00FFFF, // Cyan\n        points: 10,\n        speed: 0.7, // Increased from 0.35\n        scale: 1.8,\n        probability: 0.05\n    },\n    clam: {\n        color: 0xFFE4E1, // Misty Rose\n        points: 15,\n        speed: 0.2, // Increased from 0.1\n        scale: 1.2,\n        probability: 0.05,\n        isClam: true\n    },\n    seahorse: {\n        color: 0x9370DB, // Medium Purple\n        points: 8,\n        speed: 0.3, // Increased from 0.15\n        scale: 1.3,\n        probability: 0.1,\n        isSpecial: true\n    },\n    jellyfish: {\n        color: 0xFFB6C1, // Light Pink\n        points: 12,\n        speed: 0.4, // Increased from 0.2\n        scale: 1.5,\n        probability: 0.08,\n        isSpecial: true\n    },\n    starfish: {\n        color: 0xFF4500, // Orange Red\n        points: 6,\n        speed: 0.2, // Increased from 0.1\n        scale: 1.2,\n        probability: 0.07,\n        isSpecial: true\n    }\n};\n\n// Obstacle types and their properties\nconst OBSTACLE_TYPES = {\n    rock: {\n        geometry: new THREE.DodecahedronGeometry(1, 0),\n        color: 0x808080,\n        scale: 1,\n        probability: 0.3 // Increased probability\n    },\n    log: {\n        geometry: new THREE.CylinderGeometry(0.5, 0.5, 3, 8),\n        color: 0x8B4513,\n        scale: 1,\n        probability: 0.3 // Increased probability\n    },\n    boat: {\n        geometry: new THREE.BoxGeometry(2, 0.5, 4),\n        color: 0x8B4513,\n        scale: 1,\n        probability: 0.2\n    },\n    island: {\n        geometry: new THREE.ConeGeometry(2, 1, 8),\n        color: 0x90EE90,\n        scale: 1,\n        probability: 0.1\n    },\n    shark: {\n        geometry: new THREE.ConeGeometry(0.5, 2, 8),\n        color: 0x4682B4,\n        scale: 1,\n        probability: 0.1\n    }\n};\n\n// Initialize the game\nfunction init() {\n    // Create scene\n    scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x87CEEB);\n    scene.fog = new THREE.Fog(0x87CEEB, 20, 100);\n\n    // Create camera\n    camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.set(0, 15, 20);\n    camera.lookAt(0, 0, -100);\n    scene.add(camera);\n\n    // Create renderer\n    renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    document.getElementById('game-container').appendChild(renderer.domElement);\n\n    // Add lights\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(5, 5, 5);\n    directionalLight.castShadow = true;\n    directionalLight.shadow.mapSize.width = 2048;\n    directionalLight.shadow.mapSize.height = 2048;\n    scene.add(directionalLight);\n\n    // Create environment\n    createEnvironment();\n\n    // Create river\n    createRiver();\n\n    // Create otter\n    createOtter();\n\n    // Add event listeners\n    window.addEventListener('resize', onWindowResize);\n    window.addEventListener('keydown', onKeyDown);\n    window.addEventListener('keyup', onKeyUp);\n\n    // Reset game state\n    resetGameState();\n\n    // Show start screen\n    document.getElementById('start-screen').style.display = 'block';\n    document.getElementById('game-over').style.display = 'none';\n\n    // Start animation loop\n    animate();\n}\n\nfunction resetGameState() {\n    score = 0;\n    lives = 3;\n    gameStarted = false;\n    gameOver = false;\n    obstacles = [];\n    fish = [];\n    lastObstacleTime = 0;\n    lastFishTime = 0;\n    gameTime = 0;\n    level = 1;\n    baseSpeed = 0.2;\n    currentObstacleInterval = obstacleSpawnInterval;\n\n    // Update UI\n    updateScore();\n    updateLives();\n    updateLevel();\n    updateLeaderboard();\n}\n\n// Create the river\nfunction createRiver() {\n    // Create main water platform\n    const waterGeometry = new THREE.PlaneGeometry(600, 600);\n    const waterMaterial = new THREE.MeshStandardMaterial({\n        color: 0x0077be,\n        roughness: 0.1,\n        metalness: 0.2,\n        transparent: true,\n        opacity: 1\n    });\n    const water = new THREE.Mesh(waterGeometry, waterMaterial);\n    water.rotation.x = -Math.PI / 2;\n    water.position.y = -0.5;\n    water.position.z = -300;\n    water.receiveShadow = true;\n    scene.add(water);\n\n    // Add bottom cover\n    const bottomCoverGeometry = new THREE.BoxGeometry(600, 2, 600);\n    const bottomCoverMaterial = new THREE.MeshStandardMaterial({\n        color: 0x0077be,\n        roughness: 0.1,\n        metalness: 0.2\n    });\n    const bottomCover = new THREE.Mesh(bottomCoverGeometry, bottomCoverMaterial);\n    bottomCover.position.set(0, -2, -300);\n    bottomCover.receiveShadow = true;\n    scene.add(bottomCover);\n\n    // Main river\n    const riverGeometry = new THREE.PlaneGeometry(40, 600, 40, 100);\n    const riverMaterial = new THREE.MeshStandardMaterial({\n        color: 0x0077be,\n        roughness: 1.0, // Max roughness to remove all reflections\n        metalness: 0.0, // No metalness\n        transparent: true,\n        opacity: 0.9\n    });\n    river = new THREE.Mesh(riverGeometry, riverMaterial);\n    river.rotation.x = -Math.PI / 2;\n    river.position.z = -300;\n    river.position.y = 0.5;\n    river.receiveShadow = true;\n    scene.add(river);\n\n    // Add stream on the right side\n    const streamGeometry = new THREE.PlaneGeometry(15, 600, 20, 100);\n    const streamMaterial = new THREE.MeshStandardMaterial({\n        color: 0x00BFFF,\n        roughness: 1.0, // Max roughness to remove all reflections\n        metalness: 0.0, // No metalness\n        transparent: true,\n        opacity: 0.9\n    });\n    const stream = new THREE.Mesh(streamGeometry, streamMaterial);\n    stream.rotation.x = -Math.PI / 2;\n    stream.position.z = -300;\n    stream.position.y = 0.55;\n    stream.position.x = 50;\n    stream.receiveShadow = true;\n    scene.add(stream);\n\n    // Add stream on the left side\n    const stream2 = stream.clone();\n    stream2.position.x = -50;\n    scene.add(stream2);\n}\n\n// Create the otter\nfunction createOtter() {\n    otter = new THREE.Group();\n\n    // Body\n    const bodyGeometry = new THREE.SphereGeometry(0.5, 16, 16);\n    const bodyMaterial = new THREE.MeshStandardMaterial({\n        color: 0x8B4513,\n        roughness: 0.7,\n        metalness: 0.1\n    });\n    const body = new THREE.Mesh(bodyGeometry, bodyMaterial);\n    body.scale.set(1, 0.8, 1.2);\n    body.castShadow = true;\n    otter.add(body);\n\n    // Head\n    const headGeometry = new THREE.SphereGeometry(0.45, 16, 16);\n    const headMaterial = new THREE.MeshStandardMaterial({\n        color: 0x8B4513,\n        roughness: 0.7,\n        metalness: 0.1\n    });\n    const head = new THREE.Mesh(headGeometry, headMaterial);\n    head.position.set(0, 0.3, 0.8);\n    head.castShadow = true;\n    otter.add(head);\n\n    // Snout\n    const snoutGeometry = new THREE.SphereGeometry(0.25, 16, 16);\n    const snoutMaterial = new THREE.MeshStandardMaterial({\n        color: 0x8B4513,\n        roughness: 0.7,\n        metalness: 0.1\n    });\n    const snout = new THREE.Mesh(snoutGeometry, snoutMaterial);\n    snout.position.set(0, 0.2, 1.2);\n    snout.scale.set(1, 0.8, 0.6);\n    snout.castShadow = true;\n    otter.add(snout);\n\n    // Nose\n    const noseGeometry = new THREE.SphereGeometry(0.1, 8, 8);\n    const noseMaterial = new THREE.MeshStandardMaterial({ color: 0x000000 });\n    const nose = new THREE.Mesh(noseGeometry, noseMaterial);\n    nose.position.set(0, 0.2, 1.35);\n    otter.add(nose);\n\n    // Eyes\n    const eyeGeometry = new THREE.SphereGeometry(0.12, 8, 8);\n    const eyeMaterial = new THREE.MeshStandardMaterial({ color: 0x000000 });\n    const leftEye = new THREE.Mesh(eyeGeometry, eyeMaterial);\n    const rightEye = new THREE.Mesh(eyeGeometry, eyeMaterial);\n    leftEye.position.set(0.25, 0.4, 1.1);\n    rightEye.position.set(-0.25, 0.4, 1.1);\n    otter.add(leftEye);\n    otter.add(rightEye);\n\n    // Ears\n    const earGeometry = new THREE.SphereGeometry(0.15, 8, 8);\n    const earMaterial = new THREE.MeshStandardMaterial({\n        color: 0x8B4513,\n        roughness: 0.7,\n        metalness: 0.1\n    });\n    const leftEar = new THREE.Mesh(earGeometry, earMaterial);\n    const rightEar = new THREE.Mesh(earGeometry, earMaterial);\n    leftEar.position.set(0.3, 0.6, 0.9);\n    rightEar.position.set(-0.3, 0.6, 0.9);\n    otter.add(leftEar);\n    otter.add(rightEar);\n\n    // Tail\n    const tailGeometry = new THREE.SphereGeometry(0.4, 16, 16);\n    const tailMaterial = new THREE.MeshStandardMaterial({\n        color: 0x8B4513,\n        roughness: 0.7,\n        metalness: 0.1\n    });\n    const tail = new THREE.Mesh(tailGeometry, tailMaterial);\n    tail.position.set(0, 0.2, -1);\n    tail.scale.set(1.5, 0.2, 0.8); // Adjusted scale for long and skinny tail\n    tail.rotation.y = Math.PI / 2; // Rotate tail 90 degrees around Y axis\n    tail.castShadow = true;\n    otter.add(tail);\n\n    // Legs\n    const legGeometry = new THREE.SphereGeometry(0.2, 8, 8);\n    const legMaterial = new THREE.MeshStandardMaterial({\n        color: 0x8B4513,\n        roughness: 0.7,\n        metalness: 0.1\n    });\n\n    const positions = [\n        [0.4, -0.2, 0.5],   // Front right\n        [-0.4, -0.2, 0.5],  // Front left\n        [0.4, -0.2, -0.5],  // Back right\n        [-0.4, -0.2, -0.5]  // Back left\n    ];\n\n    positions.forEach(pos => {\n        const leg = new THREE.Mesh(legGeometry, legMaterial);\n        leg.position.set(...pos);\n        leg.castShadow = true;\n        otter.add(leg);\n    });\n\n    // Only add the top hat and brim if unlocked and checkbox is checked\n    if (localStorage.getItem('topHatUnlocked') === 'true' && document.getElementById('top-hat-toggle').checked) {\n        // Top Hat\n        const hatGeometry = new THREE.CylinderGeometry(0.3, 0.3, 0.5, 16);\n        const hatMaterial = new THREE.MeshStandardMaterial({ color: 0x000000 });\n        const hat = new THREE.Mesh(hatGeometry, hatMaterial);\n        hat.position.set(0, 0.8, 0.8);\n        hat.castShadow = true;\n        hat.userData = { type: 'hat' };\n        otter.add(hat);\n\n        // Brim\n        const brimGeometry = new THREE.CylinderGeometry(0.4, 0.4, 0.1, 16);\n        const brimMaterial = new THREE.MeshStandardMaterial({ color: 0x000000 });\n        const brim = new THREE.Mesh(brimGeometry, brimMaterial);\n        brim.position.set(0, 0.6, 0.8);\n        brim.castShadow = true;\n        brim.userData = { type: 'brim' };\n        otter.add(brim);\n    }\n\n    // Only add the crown if unlocked and toggle is checked\n    if (localStorage.getItem('crownUnlocked') === 'true' && document.getElementById('crown-toggle') && document.getElementById('crown-toggle').checked) {\n        const crownGroup = new THREE.Group();\n        const bandGeometry = new THREE.TorusGeometry(0.38, 0.10, 12, 32);\n        const bandMaterial = new THREE.MeshStandardMaterial({ color: 0xFFD700, metalness: 0.8, roughness: 0.2 });\n        const band = new THREE.Mesh(bandGeometry, bandMaterial);\n        band.position.set(0, 0.75, 0.8);\n        band.rotation.x = Math.PI / 2;\n        band.userData = { type: 'crown-band' };\n        crownGroup.add(band);\n        for (let i = 0; i < 3; i++) {\n            const triangleGeometry = new THREE.ConeGeometry(0.3, 0.8, 3);\n            const triangleMaterial = new THREE.MeshStandardMaterial({ color: 0xFFD700, metalness: 0.8, roughness: 0.2 });\n            const triangle = new THREE.Mesh(triangleGeometry, triangleMaterial);\n            const angle = (i / 3) * Math.PI * 2;\n            triangle.position.set(Math.cos(angle) * 0.3, 1.05, 0.8 + Math.sin(angle) * 0.3);\n            triangle.rotation.x = 0;\n            triangle.userData = { type: 'crown-triangle' };\n            crownGroup.add(triangle);\n        }\n        crownGroup.userData = { type: 'crown' };\n        otter.add(crownGroup);\n    }\n\n    // Set initial position\n    otter.position.set(0, 0.25, 0);\n    otter.rotation.y = Math.PI;\n    scene.add(otter);\n}\n\n// Create an obstacle\nfunction createObstacle() {\n    if (!gameStarted || gameOver) return;\n\n    // Select obstacle type based on probability\n    const random = Math.random();\n    let cumulativeProbability = 0;\n    let selectedType = 'rock';\n\n    for (const [type, properties] of Object.entries(OBSTACLE_TYPES)) {\n        cumulativeProbability += properties.probability;\n        if (random <= cumulativeProbability) {\n            selectedType = type;\n            break;\n        }\n    }\n\n    const obstacleProperties = OBSTACLE_TYPES[selectedType];\n    const obstacle = new THREE.Mesh(\n        obstacleProperties.geometry,\n        new THREE.MeshStandardMaterial({\n            color: obstacleProperties.color,\n            roughness: 0.8,\n            metalness: 0.2\n        })\n    );\n    \n    // Random position across the river\n    obstacle.position.x = (Math.random() - 0.5) * 40;\n    obstacle.position.y = 0.5;\n    obstacle.position.z = -60;\n    \n    // Random rotation\n    obstacle.rotation.x = Math.random() * Math.PI;\n    obstacle.rotation.y = Math.random() * Math.PI;\n    obstacle.rotation.z = Math.random() * Math.PI;\n    \n    obstacle.scale.set(\n        obstacleProperties.scale,\n        obstacleProperties.scale,\n        obstacleProperties.scale\n    );\n    \n    obstacle.castShadow = true;\n    obstacle.userData = { type: 'obstacle', obstacleType: selectedType };\n    scene.add(obstacle);\n    obstacles.push(obstacle);\n}\n\n// Create a fish\nfunction createFish() {\n    if (!gameStarted || gameOver) return;\n\n    // Select fish type based on probability\n    const random = Math.random();\n    let cumulativeProbability = 0;\n    let selectedType = 'normal';\n\n    for (const [type, properties] of Object.entries(FISH_TYPES)) {\n        cumulativeProbability += properties.probability;\n        if (random <= cumulativeProbability) {\n            selectedType = type;\n            break;\n        }\n    }\n\n    const fishProperties = FISH_TYPES[selectedType];\n    const fishGroup = new THREE.Group();\n\n    if (fishProperties.isClam) {\n        // Create clam\n        const shellGeometry = new THREE.SphereGeometry(0.4, 16, 16);\n        const shellMaterial = new THREE.MeshStandardMaterial({\n            color: fishProperties.color,\n            roughness: 0.3,\n            metalness: 0.8\n        });\n        const shell = new THREE.Mesh(shellGeometry, shellMaterial);\n        shell.scale.set(1, 0.6, 0.8);\n        shell.castShadow = true;\n        fishGroup.add(shell);\n\n        // Add pearl\n        const pearlGeometry = new THREE.SphereGeometry(0.1, 8, 8);\n        const pearlMaterial = new THREE.MeshStandardMaterial({\n            color: 0xFFFFFF,\n            roughness: 0.1,\n            metalness: 0.9\n        });\n        const pearl = new THREE.Mesh(pearlGeometry, pearlMaterial);\n        pearl.position.set(0, 0.1, 0);\n        fishGroup.add(pearl);\n    } else if (fishProperties.isSpecial) {\n        if (selectedType === 'seahorse') {\n            // Create seahorse\n            const bodyGeometry = new THREE.CapsuleGeometry(0.2, 0.8, 4, 8);\n            const bodyMaterial = new THREE.MeshStandardMaterial({\n                color: fishProperties.color,\n                roughness: 0.3,\n                metalness: 0.8\n            });\n            const body = new THREE.Mesh(bodyGeometry, bodyMaterial);\n            body.rotation.x = Math.PI / 2;\n            body.castShadow = true;\n            fishGroup.add(body);\n\n            // Add head\n            const headGeometry = new THREE.SphereGeometry(0.2, 8, 8);\n            const head = new THREE.Mesh(headGeometry, bodyMaterial);\n            head.position.set(0, 0.5, 0);\n            fishGroup.add(head);\n\n            // Add tail\n            const tailGeometry = new THREE.ConeGeometry(0.1, 0.4, 4);\n            const tail = new THREE.Mesh(tailGeometry, bodyMaterial);\n            tail.position.set(0, -0.5, 0);\n            tail.rotation.x = -Math.PI / 2;\n            fishGroup.add(tail);\n        } else if (selectedType === 'jellyfish') {\n            // Create jellyfish\n            const bodyGeometry = new THREE.SphereGeometry(0.3, 16, 16);\n            const bodyMaterial = new THREE.MeshStandardMaterial({\n                color: fishProperties.color,\n                roughness: 0.3,\n                metalness: 0.8,\n                transparent: true,\n                opacity: 0.8\n            });\n            const body = new THREE.Mesh(bodyGeometry, bodyMaterial);\n            body.scale.set(1, 0.8, 1);\n            body.castShadow = true;\n            fishGroup.add(body);\n\n            // Add tentacles\n            for (let i = 0; i < 8; i++) {\n                const tentacleGeometry = new THREE.CylinderGeometry(0.02, 0.02, 0.5, 4);\n                const tentacle = new THREE.Mesh(tentacleGeometry, bodyMaterial);\n                const angle = (i / 8) * Math.PI * 2;\n                tentacle.position.set(\n                    Math.cos(angle) * 0.2,\n                    -0.4,\n                    Math.sin(angle) * 0.2\n                );\n                tentacle.rotation.x = Math.PI / 2;\n                fishGroup.add(tentacle);\n            }\n        } else if (selectedType === 'starfish') {\n            // Create starfish\n            const starGeometry = new THREE.CircleGeometry(0.4, 5);\n            const starMaterial = new THREE.MeshStandardMaterial({\n                color: fishProperties.color,\n                roughness: 0.3,\n                metalness: 0.8\n            });\n            const star = new THREE.Mesh(starGeometry, starMaterial);\n            star.rotation.x = -Math.PI / 2;\n            star.castShadow = true;\n            fishGroup.add(star);\n        }\n    } else {\n        // Regular fish body\n        const bodyGeometry = new THREE.CapsuleGeometry(0.3, 1, 4, 8);\n        const bodyMaterial = new THREE.MeshStandardMaterial({\n            color: fishProperties.color,\n            roughness: 0.3,\n            metalness: 0.8\n        });\n        const body = new THREE.Mesh(bodyGeometry, bodyMaterial);\n        body.scale.set(1, 0.6, 1.2); // Adjusted proportions\n        body.castShadow = true;\n        fishGroup.add(body);\n\n        // Tail\n        const tailGeometry = new THREE.ConeGeometry(0.4, 0.8, 4);\n        const tailMaterial = new THREE.MeshStandardMaterial({\n            color: fishProperties.color,\n            roughness: 0.3,\n            metalness: 0.8\n        });\n        const tail = new THREE.Mesh(tailGeometry, tailMaterial);\n        tail.position.set(0, 0, -0.8);\n        tail.rotation.x = Math.PI / 2;\n        tail.scale.set(1, 0.8, 1); // Adjusted tail proportions\n        tail.castShadow = true;\n        fishGroup.add(tail);\n\n        // Dorsal fin (top fin)\n        const dorsalFinGeometry = new THREE.ConeGeometry(0.15, 0.4, 4);\n        const dorsalFin = new THREE.Mesh(dorsalFinGeometry, tailMaterial);\n        dorsalFin.position.set(0, 0.3, 0);\n        dorsalFin.rotation.x = -Math.PI / 2;\n        dorsalFin.castShadow = true;\n        fishGroup.add(dorsalFin);\n\n        // Pectoral fins (side fins)\n        const finGeometry = new THREE.ConeGeometry(0.2, 0.4, 4);\n        const finMaterial = new THREE.MeshStandardMaterial({\n            color: fishProperties.color,\n            roughness: 0.3,\n            metalness: 0.8\n        });\n        \n        // Left pectoral fin\n        const leftFin = new THREE.Mesh(finGeometry, finMaterial);\n        leftFin.position.set(0.4, 0, 0.2);\n        leftFin.rotation.z = -Math.PI / 2;\n        leftFin.rotation.y = Math.PI / 4;\n        leftFin.castShadow = true;\n        fishGroup.add(leftFin);\n        \n        // Right pectoral fin\n        const rightFin = new THREE.Mesh(finGeometry, finMaterial);\n        rightFin.position.set(-0.4, 0, 0.2);\n        rightFin.rotation.z = Math.PI / 2;\n        rightFin.rotation.y = -Math.PI / 4;\n        rightFin.castShadow = true;\n        fishGroup.add(rightFin);\n\n        // Pelvic fins (bottom fins)\n        const pelvicFinGeometry = new THREE.ConeGeometry(0.15, 0.3, 4);\n        const pelvicFinMaterial = new THREE.MeshStandardMaterial({\n            color: fishProperties.color,\n            roughness: 0.3,\n            metalness: 0.8\n        });\n\n        // Left pelvic fin\n        const leftPelvicFin = new THREE.Mesh(pelvicFinGeometry, pelvicFinMaterial);\n        leftPelvicFin.position.set(0.2, -0.2, 0.2);\n        leftPelvicFin.rotation.x = Math.PI / 2;\n        leftPelvicFin.rotation.z = Math.PI / 4;\n        leftPelvicFin.castShadow = true;\n        fishGroup.add(leftPelvicFin);\n\n        // Right pelvic fin\n        const rightPelvicFin = new THREE.Mesh(pelvicFinGeometry, pelvicFinMaterial);\n        rightPelvicFin.position.set(-0.2, -0.2, 0.2);\n        rightPelvicFin.rotation.x = Math.PI / 2;\n        rightPelvicFin.rotation.z = -Math.PI / 4;\n        rightPelvicFin.castShadow = true;\n        fishGroup.add(rightPelvicFin);\n\n        // Eyes\n        const eyeGeometry = new THREE.SphereGeometry(0.08, 8, 8);\n        const eyeMaterial = new THREE.MeshStandardMaterial({ color: 0x000000 });\n        \n        // Left eye\n        const leftEye = new THREE.Mesh(eyeGeometry, eyeMaterial);\n        leftEye.position.set(0.2, 0.1, 0.4);\n        fishGroup.add(leftEye);\n        \n        // Right eye\n        const rightEye = new THREE.Mesh(eyeGeometry, eyeMaterial);\n        rightEye.position.set(-0.2, 0.1, 0.4);\n        fishGroup.add(rightEye);\n\n        // Mouth\n        const mouthGeometry = new THREE.ConeGeometry(0.1, 0.2, 8);\n        const mouthMaterial = new THREE.MeshStandardMaterial({ color: 0x000000 });\n        const mouth = new THREE.Mesh(mouthGeometry, mouthMaterial);\n        mouth.position.set(0, 0, 0.6);\n        mouth.rotation.x = Math.PI / 2;\n        fishGroup.add(mouth);\n    }\n\n    // Position the fish\n    fishGroup.position.x = (Math.random() - 0.5) * 40;\n    fishGroup.position.y = 0.5;\n    fishGroup.position.z = -60;\n    \n    // Random rotation\n    fishGroup.rotation.y = Math.random() * Math.PI * 2;\n    \n    // Scale based on fish type\n    fishGroup.scale.set(\n        fishProperties.scale,\n        fishProperties.scale,\n        fishProperties.scale\n    );\n    \n    fishGroup.userData = { type: selectedType };\n\n    // Add point light to make it glow\n    const fishLight = new THREE.PointLight(0xffffff, 1, 2);\n    fishLight.position.set(0, 0, 0);\n    fishGroup.add(fishLight);\n\n    scene.add(fishGroup);\n    fish.push(fishGroup);\n}\n\n// Handle window resize\nfunction onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n}\n\n// Handle key down events\nfunction onKeyDown(event) {\n    if (keys.hasOwnProperty(event.key)) {\n        keys[event.key] = true;\n    }\n}\n\n// Handle key up events\nfunction onKeyUp(event) {\n    if (keys.hasOwnProperty(event.key)) {\n        keys[event.key] = false;\n    }\n}\n\n// Check for collisions\nfunction checkCollisions() {\n    if (!gameStarted || gameOver) return;\n\n    // Check obstacle collisions\n    for (let i = obstacles.length - 1; i >= 0; i--) {\n        const obstacle = obstacles[i];\n        const distance = otter.position.distanceTo(obstacle.position);\n        \n        if (distance < 1.5) {\n            // Collision with obstacle\n            lives--;\n            updateLives();\n            scene.remove(obstacle);\n            obstacles.splice(i, 1);\n            \n            if (lives <= 0) {\n                endGame();\n            }\n        }\n    }\n\n    // Check fish collisions\n    for (let i = fish.length - 1; i >= 0; i--) {\n        const fishObj = fish[i];\n        const distance = otter.position.distanceTo(fishObj.position);\n        \n        if (distance < 1.5) {\n            // Collect fish\n            const fishType = fishObj.userData.type;\n            const fishPoints = FISH_TYPES[fishType].points;\n            score += fishPoints;\n            updateScore();\n            scene.remove(fishObj);\n            fish.splice(i, 1);\n        }\n    }\n}\n\n// End game function\nfunction endGame() {\n    gameOver = true;\n    gameStarted = false;\n    \n    // Clear timer\n    if (timerInterval) {\n        clearInterval(timerInterval);\n    }\n    \n    // Show game over screen\n    document.getElementById('game-over').style.display = 'block';\n    document.getElementById('final-score').textContent = `Final Score: ${score}`;\n    document.getElementById('name-input').style.display = 'block';\n    \n    // Allow player to input name\n    const nameInput = document.getElementById('player-name');\n    nameInput.focus();\n    \n    // Save score, level, and time to localStorage\n    const scores = JSON.parse(localStorage.getItem('scores') || '[]');\n    scores.push({ name: nameInput.value.trim() || 'Anonymous', score: score, level: level, time: Math.round(gameTime) });\n    localStorage.setItem('scores', JSON.stringify(scores));\n    \n    // Unlock top hat if score >= 100\n    if (score >= 100) {\n        localStorage.setItem('topHatUnlocked', 'true');\n    }\n    // Unlock crown if score >= 300\n    if (score >= 300) {\n        localStorage.setItem('crownUnlocked', 'true');\n    }\n    updateUnlockables();\n    // Update leaderboard\n    updateLeaderboard();\n}\n\n// Update game state\nfunction update() {\n    if (!gameStarted || gameOver) return;\n\n    // Move otter based on key presses\n    const moveSpeed = 0.2;\n    let moving = false;\n    let targetRotation = otter.rotation.y;\n\n    if (keys.ArrowUp || keys.w) {\n        otter.position.z -= moveSpeed;\n        targetRotation = Math.PI;\n        moving = true;\n    }\n    if (keys.ArrowDown || keys.s) {\n        otter.position.z += moveSpeed;\n        targetRotation = 0;\n        moving = true;\n    }\n    if (keys.ArrowLeft || keys.a) {\n        otter.position.x -= moveSpeed;\n        targetRotation = -Math.PI / 2;\n        moving = true;\n    }\n    if (keys.ArrowRight || keys.d) {\n        otter.position.x += moveSpeed;\n        targetRotation = Math.PI / 2;\n        moving = true;\n    }\n\n    // Smoothly rotate otter to face movement direction\n    if (moving) {\n        otter.rotation.y = THREE.MathUtils.lerp(otter.rotation.y, targetRotation, 0.2);\n    }\n\n    // Keep otter within bounds\n    otter.position.x = Math.max(-20, Math.min(20, otter.position.x));\n    otter.position.z = Math.max(-49, Math.min(49, otter.position.z));\n\n    // Calculate current speed based on level\n    const currentSpeed = baseSpeed * (1 + (level - 1) * 0.15); // Increased speed progression\n\n    // Update obstacle spawn interval based on level\n    currentObstacleInterval = Math.max(100, obstacleSpawnInterval - (level * 20)); // Decreases by 20ms per level, minimum 100ms\n\n    // Spawn obstacles and fish\n    const currentTime = Date.now();\n    if (currentTime - lastObstacleTime > currentObstacleInterval) {\n        createObstacle();\n        // Chance to spawn additional obstacles based on level\n        if (Math.random() < (level * 0.1)) { // 10% chance per level to spawn extra obstacle\n            createObstacle();\n        }\n        lastObstacleTime = currentTime;\n    }\n\n    if (currentTime - lastFishTime > 1500) {\n        createFish();\n        lastFishTime = currentTime;\n    }\n\n    // Update obstacles with level-based speed\n    for (let i = obstacles.length - 1; i >= 0; i--) {\n        obstacles[i].position.z += currentSpeed;\n        \n        if (obstacles[i].position.z > 10) {\n            scene.remove(obstacles[i]);\n            obstacles.splice(i, 1);\n        }\n    }\n\n    // Update fish with level-based speed\n    for (let i = fish.length - 1; i >= 0; i--) {\n        const fishObj = fish[i];\n        const fishType = fishObj.userData.type;\n        const fishSpeed = FISH_TYPES[fishType].speed * currentSpeed;\n        \n        fishObj.position.z += fishSpeed;\n        \n        // Add gentle up and down motion\n        fishObj.position.y = 0.5 + Math.sin(Date.now() * 0.003 + i) * 0.1;\n        \n        if (fishObj.position.z > 10) {\n            scene.remove(fishObj);\n            fish.splice(i, 1);\n        }\n    }\n\n    // Update timer and date\n    gameTime += 1/120; // Slowed down timer\n    const minutes = Math.floor(gameTime / 60);\n    const seconds = Math.floor(gameTime % 60);\n    document.getElementById('timer').textContent = `Time: ${minutes}:${seconds.toString().padStart(2, '0')}`;\n    document.getElementById('date').textContent = new Date().toLocaleDateString();\n\n    // Check collisions\n    checkCollisions();\n\n    // Update environment\n    updateEnvironment();\n}\n\n// Animation loop\nfunction animate() {\n    requestAnimationFrame(animate);\n    update();\n    renderer.render(scene, camera);\n}\n\n// Start game function\nwindow.startGame = function() {\n    if (gameStarted) return;\n    \n    gameStarted = true;\n    gameOver = false;\n    \n    // Hide start screen\n    document.getElementById('start-screen').style.display = 'none';\n    \n    // Start timer for level progression\n    timerInterval = setInterval(() => {\n        level++;\n        updateLevel();\n        showLevelUpMessage();\n        // Increase base speed slightly with each level\n        baseSpeed += 0.02;\n    }, 15000); // Changed from 30000 to 15000 (15 seconds)\n    \n    // Start spawning obstacles and fish\n    lastObstacleTime = Date.now();\n    lastFishTime = Date.now();\n};\n\n// Restart game function\nwindow.restartGame = function() {\n    // Clear existing game elements\n    obstacles.forEach(obstacle => scene.remove(obstacle));\n    fish.forEach(fish => scene.remove(fish));\n    \n    // Clear timer\n    if (timerInterval) {\n        clearInterval(timerInterval);\n    }\n    \n    // Reset game state\n    resetGameState();\n    \n    // Hide game over screen\n    document.getElementById('game-over').style.display = 'none';\n    \n    // Start new game\n    startGame();\n};\n\n// Update score display\nfunction updateScore() {\n    document.getElementById('score').textContent = `Score: ${score}`;\n}\n\n// Update lives display\nfunction updateLives() {\n    document.getElementById('lives').textContent = `Lives: ${lives}`;\n}\n\n// Update level display\nfunction updateLevel() {\n    document.getElementById('level').textContent = `Level: ${level}`;\n}\n\n// Leaderboard functionality\nfunction updateLeaderboard() {\n    const leaderboardList = document.getElementById('top-scores');\n    const startScores = document.getElementById('start-scores');\n    leaderboardList.innerHTML = '';\n    startScores.innerHTML = '';\n    const scores = JSON.parse(localStorage.getItem('scores') || '[]');\n    scores.sort((a, b) => b.score - a.score);\n    scores.slice(0, 5).forEach(score => {\n        if (score.name !== 'Anonymous') {\n            const li = document.createElement('li');\n            li.textContent = `${score.name}: ${score.score} points, Level ${score.level}, Time ${score.time}`;\n            leaderboardList.appendChild(li);\n            startScores.appendChild(li.cloneNode(true));\n        }\n    });\n}\n\n// Submit score function\nwindow.submitScore = function() {\n    const nameInput = document.getElementById('player-name');\n    const playerName = nameInput.value.trim() || 'Anonymous';\n    \n    // Add score to leaderboard\n    const scores = JSON.parse(localStorage.getItem('scores') || '[]');\n    scores.push({ name: playerName, score: score, level: level, time: Math.round(gameTime) });\n    localStorage.setItem('scores', JSON.stringify(scores));\n    \n    // Update leaderboard display\n    updateLeaderboard();\n    \n    // Clear input\n    nameInput.value = '';\n};\n\n// Reset leaderboard\nfunction resetLeaderboard() {\n    localStorage.removeItem('scores');\n    updateLeaderboard();\n}\n\n// Call resetLeaderboard on game initialization\nwindow.onload = function() {\n    init();\n    resetLeaderboard();\n    updateUnlockables();\n};\n\n// Create the scene environment\nfunction createEnvironment() {\n    // Create sun\n    const sunGeometry = new THREE.SphereGeometry(5, 32, 32);\n    const sunMaterial = new THREE.MeshBasicMaterial({\n        color: 0xffff00,\n        transparent: true,\n        opacity: 0.8\n    });\n    const sun = new THREE.Mesh(sunGeometry, sunMaterial);\n    sun.position.set(30, 30, -50);\n    scene.add(sun);\n\n    // Add sun glow\n    const sunGlowGeometry = new THREE.SphereGeometry(6, 32, 32);\n    const sunGlowMaterial = new THREE.MeshBasicMaterial({\n        color: 0xffff00,\n        transparent: true,\n        opacity: 0.3\n    });\n    const sunGlow = new THREE.Mesh(sunGlowGeometry, sunGlowMaterial);\n    sunGlow.position.set(30, 30, -50); // Ensure sun glow does not overlap with water\n    scene.add(sunGlow);\n\n    // Create clouds\n    const cloudGroup = new THREE.Group();\n    const cloudMaterial = new THREE.MeshStandardMaterial({\n        color: 0xFFFFFF,\n        transparent: true,\n        opacity: 0.9,\n        roughness: 0.8,\n        metalness: 0.2\n    });\n\n    // Create multiple clouds\n    for (let i = 0; i < 10; i++) {\n        const cloud = createCloud(cloudMaterial);\n        // Position clouds randomly in the sky, but below the sun\n        cloud.position.set(\n            (Math.random() - 0.5) * 300,\n            20 + Math.random() * 15, // Lowered cloud height\n            -100 - Math.random() * 200\n        );\n        cloud.scale.set(\n            1 + Math.random(),\n            1 + Math.random(),\n            1 + Math.random()\n        );\n        cloud.userData = {\n            speed: 0.02 + Math.random() * 0.03,\n            initialX: cloud.position.x\n        };\n        cloudGroup.add(cloud);\n    }\n\n    scene.add(cloudGroup);\n\n    // Store references for animation\n    scene.userData.sunGroup = sun;\n    scene.userData.cloudGroup = cloudGroup;\n}\n\nfunction createCloud(material) {\n    const cloudGroup = new THREE.Group();\n    \n    // Create multiple spheres to form a cloud\n    const numSpheres = 5 + Math.floor(Math.random() * 4);\n    for (let i = 0; i < numSpheres; i++) {\n        const radius = 3 + Math.random() * 2;\n        const geometry = new THREE.SphereGeometry(radius, 8, 8);\n        const sphere = new THREE.Mesh(geometry, material);\n        \n        // Position spheres to form a cloud shape\n        sphere.position.set(\n            (Math.random() - 0.5) * 8,\n            (Math.random() - 0.5) * 4,\n            (Math.random() - 0.5) * 8\n        );\n        \n        cloudGroup.add(sphere);\n    }\n    \n    return cloudGroup;\n}\n\n// Update the environment movement\nfunction updateEnvironment() {\n    if (!gameStarted || gameOver) return;\n\n    // Animate river surface\n    if (river) {\n        const time = Date.now() * 0.001;\n        const vertices = river.geometry.attributes.position.array;\n        \n        for (let i = 0; i < vertices.length; i += 3) {\n            const x = vertices[i];\n            const z = vertices[i + 2];\n            vertices[i + 1] = Math.sin(x * 0.5 + time) * 0.2 + Math.sin(z * 0.5 + time) * 0.2;\n        }\n        \n        river.geometry.attributes.position.needsUpdate = true;\n        river.geometry.computeVertexNormals();\n    }\n\n    // Animate sun\n    if (scene.userData.sunGroup) {\n        const sun = scene.userData.sunGroup;\n        sun.rotation.y += 0.0005; // Slowed down rotation\n        sun.rotation.z = Math.sin(Date.now() * 0.0003) * 0.05; // Reduced wobble\n    }\n\n    // Animate clouds\n    if (scene.userData.cloudGroup) {\n        const cloudGroup = scene.userData.cloudGroup;\n        cloudGroup.children.forEach(cloud => {\n            // Move cloud\n            cloud.position.x += cloud.userData.speed;\n            \n            // Reset cloud position if it goes too far\n            if (cloud.position.x > 200) {\n                cloud.position.x = -200;\n            }\n            \n            // Add gentle floating motion\n            cloud.position.y += Math.sin(Date.now() * 0.001 + cloud.position.x) * 0.01;\n        });\n    }\n}\n\nfunction showLevelUpMessage() {\n    let msg = document.getElementById('level-up-message');\n    if (!msg) {\n        msg = document.createElement('div');\n        msg.id = 'level-up-message';\n        document.body.appendChild(msg);\n    }\n    msg.textContent = `Level ${level}!`;\n    msg.style.display = 'block';\n    msg.style.opacity = '1';\n    setTimeout(() => {\n        msg.style.opacity = '0';\n        setTimeout(() => { msg.style.display = 'none'; }, 500);\n    }, 1000);\n}\n\n// Update unlockables section on start menu\nfunction updateUnlockables() {\n    const unlocked = localStorage.getItem('topHatUnlocked') === 'true';\n    const status = document.getElementById('top-hat-status');\n    const toggle = document.getElementById('top-hat-toggle');\n    if (status) {\n        if (unlocked) {\n            status.textContent = 'Unlocked!';\n            status.style.color = '#4CAF50';\n            toggle.disabled = false;\n        } else {\n            status.textContent = 'Locked (Score 100+ in a game)';\n            status.style.color = '#ff00ff';\n            toggle.disabled = true;\n        }\n    }\n    const crownStatus = document.getElementById('crown-status');\n    const crownToggle = document.getElementById('crown-toggle');\n    const crownUnlocked = localStorage.getItem('crownUnlocked') === 'true';\n    if (crownStatus) {\n        if (crownUnlocked) {\n            crownStatus.textContent = 'Unlocked!';\n            crownStatus.style.color = '#FFD700';\n            crownToggle.disabled = false;\n        } else {\n            crownStatus.textContent = 'Locked (Score 300+ in a game)';\n            crownStatus.style.color = '#ff00ff';\n            crownToggle.disabled = true;\n        }\n    }\n}\n\n// Add event listener for top hat toggle\ndocument.getElementById('top-hat-toggle').addEventListener('change', function() {\n    if (this.checked) {\n        // Add top hat to otter\n        const hatGeometry = new THREE.CylinderGeometry(0.3, 0.3, 0.5, 16);\n        const hatMaterial = new THREE.MeshStandardMaterial({ color: 0x000000 });\n        const hat = new THREE.Mesh(hatGeometry, hatMaterial);\n        hat.position.set(0, 0.8, 0.8);\n        hat.castShadow = true;\n        hat.userData = { type: 'hat' };\n        otter.add(hat);\n\n        // Add brim\n        const brimGeometry = new THREE.CylinderGeometry(0.4, 0.4, 0.1, 16);\n        const brimMaterial = new THREE.MeshStandardMaterial({ color: 0x000000 });\n        const brim = new THREE.Mesh(brimGeometry, brimMaterial);\n        brim.position.set(0, 0.6, 0.8);\n        brim.castShadow = true;\n        brim.userData = { type: 'brim' };\n        otter.add(brim);\n    } else {\n        // Remove top hat and brim from otter\n        const hat = otter.children.find(child => child.userData && child.userData.type === 'hat');\n        if (hat) otter.remove(hat);\n        const brim = otter.children.find(child => child.userData && child.userData.type === 'brim');\n        if (brim) otter.remove(brim);\n    }\n    // Remove any existing crown\n    const crown = otter.children.find(child => child.userData && child.userData.type === 'crown');\n    if (crown) otter.remove(crown);\n    const crownToggle = document.getElementById('crown-toggle');\n    if (crownToggle) crownToggle.checked = false;\n});\n\n// Add event listener for crown toggle\nif (document.getElementById('crown-toggle')) {\n    document.getElementById('crown-toggle').addEventListener('change', function() {\n        // Remove any existing crown or top hat\n        const crown = otter.children.find(child => child.userData && child.userData.type === 'crown');\n        if (crown) otter.remove(crown);\n        const hat = otter.children.find(child => child.userData && child.userData.type === 'hat');\n        if (hat) otter.remove(hat);\n        const brim = otter.children.find(child => child.userData && child.userData.type === 'brim');\n        if (brim) otter.remove(brim);\n        if (this.checked) {\n            // Add crown with triangles covering otter's head fully and aligned with torus\n            const crownGroup = new THREE.Group();\n            const bandGeometry = new THREE.TorusGeometry(0.38, 0.10, 12, 32);\n            const bandMaterial = new THREE.MeshStandardMaterial({ color: 0xFFD700, metalness: 0.8, roughness: 0.2 });\n            const band = new THREE.Mesh(bandGeometry, bandMaterial);\n            band.position.set(0, 0.75, 0.8);\n            band.rotation.x = Math.PI / 2;\n            band.userData = { type: 'crown-band' };\n            crownGroup.add(band);\n            for (let i = 0; i < 3; i++) {\n                const triangleGeometry = new THREE.ConeGeometry(0.3, 0.8, 3);\n                const triangleMaterial = new THREE.MeshStandardMaterial({ color: 0xFFD700, metalness: 0.8, roughness: 0.2 });\n                const triangle = new THREE.Mesh(triangleGeometry, triangleMaterial);\n                const angle = (i / 3) * Math.PI * 2;\n                triangle.position.set(Math.cos(angle) * 0.3, 1.05, 0.8 + Math.sin(angle) * 0.3);\n                triangle.rotation.x = 0;\n                triangle.userData = { type: 'crown-triangle' };\n                crownGroup.add(triangle);\n            }\n            crownGroup.userData = { type: 'crown' };\n            otter.add(crownGroup);\n            // Uncheck top hat if checked\n            const topHatToggle = document.getElementById('top-hat-toggle');\n            if (topHatToggle) topHatToggle.checked = false;\n        }\n    });\n}\n\nfunction returnToMenu() {\n    document.getElementById('game-over').style.display = 'none';\n    document.getElementById('start-screen').style.display = 'block';\n    resetGameState();\n    // Remove top hat from otter if it was added\n    if (otter) {\n        const hat = otter.children.find(child => child.userData && child.userData.type === 'hat');\n        if (hat) {\n            otter.remove(hat);\n        }\n    }\n    // Stop the game loop\n    gameStarted = false;\n    gameOver = true;\n    // Clear existing game elements\n    obstacles.forEach(obstacle => scene.remove(obstacle));\n    fish.forEach(fish => scene.remove(fish));\n    obstacles = [];\n    fish = [];\n    // Reset otter position\n    otter.position.set(0, 0.25, 0);\n    otter.rotation.y = Math.PI;\n    return false;\n} ","import React, { useEffect, useRef } from 'react';\r\nimport * as THREE from 'three';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\r\n\r\n// Import the game logic from main.js\r\nimport './main.js';\r\n\r\nconst Game: React.FC = () => {\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (containerRef.current) {\r\n      // Append the game container to the DOM\r\n      const gameContainer = document.createElement('div');\r\n      gameContainer.id = 'game-container';\r\n      containerRef.current.appendChild(gameContainer);\r\n\r\n      // Initialize the game\r\n      (window as any).init();\r\n\r\n      // Cleanup on unmount\r\n      return () => {\r\n        if (containerRef.current) {\r\n          containerRef.current.removeChild(gameContainer);\r\n        }\r\n      };\r\n    }\r\n  }, []);\r\n\r\n  return <div ref={containerRef} style={{ width: '100%', height: '100%' }} />;\r\n};\r\n\r\nexport default Game; ","import React, { useEffect, useState } from 'react';\r\nimport { StyleSheet, Text, View, Dimensions } from 'react-native';\r\nimport { StatusBar } from 'expo-status-bar';\r\nimport Game from './src/Game';\r\n\r\nexport default function App() {\r\n  const [dimensions, setDimensions] = useState({\r\n    width: Dimensions.get('window').width,\r\n    height: Dimensions.get('window').height,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const subscription = Dimensions.addEventListener('change', ({ window }) => {\r\n      setDimensions({\r\n        width: window.width,\r\n        height: window.height,\r\n      });\r\n    });\r\n\r\n    return () => subscription?.remove();\r\n  }, []);\r\n\r\n  return (\r\n    <View style={[styles.container, { width: dimensions.width, height: dimensions.height }]}>\r\n      <Text style={styles.title}>Otter River Adventure</Text>\r\n      <Text style={styles.subtitle}>Mobile Version</Text>\r\n      <View style={styles.gameContainer}>\r\n        <Game />\r\n      </View>\r\n      <StatusBar style=\"auto\" />\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  title: {\r\n    fontSize: 24,\r\n    fontWeight: 'bold',\r\n    marginBottom: 10,\r\n  },\r\n  subtitle: {\r\n    fontSize: 18,\r\n    color: '#666',\r\n    marginBottom: 20,\r\n  },\r\n  gameContainer: {\r\n    width: '100%',\r\n    height: '70%',\r\n    backgroundColor: '#f0f0f0',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n}); ","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t792: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkweb\"] = self[\"webpackChunkweb\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [547], () => (__webpack_require__(6387)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["scene","camera","renderer","otter","river","timerInterval","score","lives","gameStarted","gameOver","obstacles","fish","lastObstacleTime","lastFishTime","gameTime","level","baseSpeed","currentObstacleInterval","keys","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","w","a","s","d","FISH_TYPES","JSON","parse","localStorage","getItem","normal","color","points","speed","scale","probability","rainbow","golden","emerald","diamond","clam","isClam","seahorse","isSpecial","jellyfish","starfish","OBSTACLE_TYPES","rock","geometry","THREE","log","boat","island","shark","init","background","fog","window","innerWidth","innerHeight","position","set","lookAt","add","antialias","setSize","shadowMap","enabled","type","document","getElementById","appendChild","domElement","ambientLight","directionalLight","castShadow","shadow","mapSize","width","height","sunGeometry","sunMaterial","transparent","opacity","sun","sunGlowGeometry","sunGlowMaterial","sunGlow","cloudGroup","cloudMaterial","roughness","metalness","i","cloud","createCloud","Math","random","userData","initialX","x","sunGroup","createEnvironment","waterGeometry","waterMaterial","water","rotation","PI","y","z","receiveShadow","bottomCoverGeometry","bottomCoverMaterial","bottomCover","riverGeometry","riverMaterial","streamGeometry","streamMaterial","stream","stream2","clone","createRiver","bodyGeometry","bodyMaterial","body","headGeometry","headMaterial","head","snoutGeometry","snoutMaterial","snout","noseGeometry","noseMaterial","nose","eyeGeometry","eyeMaterial","leftEye","rightEye","earGeometry","earMaterial","leftEar","rightEar","tailGeometry","tailMaterial","tail","legGeometry","legMaterial","forEach","pos","_leg$position","leg","apply","_toConsumableArray","checked","hatGeometry","hatMaterial","hat","brimGeometry","brimMaterial","brim","crownGroup","bandGeometry","bandMaterial","band","triangleGeometry","triangleMaterial","triangle","angle","cos","sin","createOtter","addEventListener","onWindowResize","onKeyDown","onKeyUp","resetGameState","style","display","animate","updateScore","updateLives","updateLevel","updateLeaderboard","createObstacle","cumulativeProbability","selectedType","_ref","Object","entries","_ref2","_slicedToArray","obstacleProperties","obstacle","obstacleType","push","aspect","updateProjectionMatrix","event","hasOwnProperty","key","endGame","clearInterval","textContent","nameInput","focus","scores","name","value","trim","time","round","setItem","stringify","updateUnlockables","update","moveSpeed","moving","targetRotation","lerp","max","min","currentSpeed","currentTime","Date","now","_ref3","_ref4","fishProperties","fishGroup","shellGeometry","shellMaterial","shell","pearlGeometry","pearlMaterial","pearl","tentacleGeometry","tentacle","starGeometry","starMaterial","star","dorsalFinGeometry","dorsalFin","finGeometry","finMaterial","leftFin","rightFin","pelvicFinGeometry","pelvicFinMaterial","leftPelvicFin","rightPelvicFin","mouthGeometry","mouthMaterial","mouth","fishLight","createFish","length","remove","splice","fishObj","fishType","fishSpeed","minutes","floor","seconds","toString","padStart","toLocaleDateString","distanceTo","fishPoints","checkCollisions","vertices","attributes","array","needsUpdate","computeVertexNormals","children","updateEnvironment","requestAnimationFrame","render","leaderboardList","startScores","innerHTML","sort","b","slice","li","createElement","cloneNode","material","numSpheres","radius","sphere","unlocked","status","toggle","disabled","crownStatus","crownToggle","crownUnlocked","startGame","setInterval","msg","id","setTimeout","showLevelUpMessage","restartGame","submitScore","playerName","onload","removeItem","this","find","child","crown","topHatToggle","containerRef","useRef","useEffect","current","gameContainer","removeChild","_jsx","ref","App","_useState","useState","Dimensions","get","_useState2","dimensions","setDimensions","subscription","_jsxs","View","styles","container","Text","title","subtitle","Game","StatusBar","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","fontSize","fontWeight","marginBottom","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","deferred","O","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","r","n","getter","__esModule","definition","o","defineProperty","enumerable","obj","prop","prototype","call","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}